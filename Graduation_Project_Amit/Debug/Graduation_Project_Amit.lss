
Graduation_Project_Amit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ed2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00002ed2  00002f66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008001a4  008001a4  000030aa  2**0
                  ALLOC
  3 .stab         00003c18  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dbd  00000000  00000000  00006cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b21e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d77c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000dc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_1>
       8:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_2>
       c:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_10>
      2c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <main>
      8a:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_11>:
void vector(void)

//timer 0 funs
//ISR timer 0 FUN

ISR(__vector_11){
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	TIMER0_OVF_INT();
     e58:	e0 91 b1 01 	lds	r30, 0x01B1
     e5c:	f0 91 b2 01 	lds	r31, 0x01B2
     e60:	09 95       	icall
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	ff 91       	pop	r31
     e68:	ef 91       	pop	r30
     e6a:	bf 91       	pop	r27
     e6c:	af 91       	pop	r26
     e6e:	9f 91       	pop	r25
     e70:	8f 91       	pop	r24
     e72:	7f 91       	pop	r23
     e74:	6f 91       	pop	r22
     e76:	5f 91       	pop	r21
     e78:	4f 91       	pop	r20
     e7a:	3f 91       	pop	r19
     e7c:	2f 91       	pop	r18
     e7e:	0f 90       	pop	r0
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	0f 90       	pop	r0
     e84:	1f 90       	pop	r1
     e86:	18 95       	reti

00000e88 <__vector_10>:

ISR(__vector_10){
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CTC_INT();
     eb2:	e0 91 b3 01 	lds	r30, 0x01B3
     eb6:	f0 91 b4 01 	lds	r31, 0x01B4
     eba:	09 95       	icall
}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <TIMER0_vid_int>:


void TIMER0_vid_int(void)//interface & initialization
{ TCCR0=0x00;
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	e3 e5       	ldi	r30, 0x53	; 83
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	10 82       	st	Z, r1
	SET(TCCR0,WGM00);
	CLEAR(TCCR0,WGM01);
	TCCR0 |= TIMER_COMP_OUTPUT_MODE;

	#elif TIMER_MODE_WAVE == CTC_MODE
	CLEAR(TCCR0,WGM00);
     ef0:	a3 e5       	ldi	r26, 0x53	; 83
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e3 e5       	ldi	r30, 0x53	; 83
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8f 7b       	andi	r24, 0xBF	; 191
     efc:	8c 93       	st	X, r24
	SET(TCCR0,WGM01);
     efe:	a3 e5       	ldi	r26, 0x53	; 83
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e3 e5       	ldi	r30, 0x53	; 83
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	88 60       	ori	r24, 0x08	; 8
     f0a:	8c 93       	st	X, r24
	TCCR0 |= TIMER_COMP_OUTPUT_MODE;
     f0c:	a3 e5       	ldi	r26, 0x53	; 83
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e3 e5       	ldi	r30, 0x53	; 83
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8c 93       	st	X, r24

	#else
	#warning "Invalid Value ........"

	#endif
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <TIMER0_vid_Start>:

void TIMER0_vid_Start(void)//start timer 0
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLOCK_STOP;
     f26:	a3 e5       	ldi	r26, 0x53	; 83
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	88 7f       	andi	r24, 0xF8	; 248
     f32:	8c 93       	st	X, r24
	TCCR0 |= TIMER_SELECT_ENABLE;
     f34:	a3 e5       	ldi	r26, 0x53	; 83
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e3 e5       	ldi	r30, 0x53	; 83
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	8c 93       	st	X, r24

}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <TIMER0_vid_Stop>:

void TIMER0_vid_Stop(void)//stop timer 0
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLOCK_STOP;
     f50:	a3 e5       	ldi	r26, 0x53	; 83
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e3 e5       	ldi	r30, 0x53	; 83
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	88 7f       	andi	r24, 0xF8	; 248
     f5c:	8c 93       	st	X, r24
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <TIMER0_vid_Reset>:
void TIMER0_vid_Reset(void)//reset timer 0
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0x00;
     f6c:	e2 e5       	ldi	r30, 0x52	; 82
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	10 82       	st	Z, r1
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <TIMER0_vid_Write_OVR_TCNT0>:


void TIMER0_vid_Write_OVR_TCNT0(uint8 Copy_Start_Value)//pre_load
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	0f 92       	push	r0
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
		TCNT0 = Copy_Start_Value;
     f84:	e2 e5       	ldi	r30, 0x52	; 82
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	80 83       	st	Z, r24
}
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <TIMER0_vid_Write_COMP_OCR0>:
void TIMER0_vid_Write_COMP_OCR0(uint8 Copy_Start_Value)//OCR
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = Copy_Start_Value;
     fa0:	ec e5       	ldi	r30, 0x5C	; 92
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	80 83       	st	Z, r24
}
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <TIMER0_vid_OVR_Interrupt_Enable>:

//INT enable &disable
void TIMER0_vid_OVR_Interrupt_Enable(void)//overflow INT enable
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	SET(SREG,GIE);
     fb8:	af e5       	ldi	r26, 0x5F	; 95
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ef e5       	ldi	r30, 0x5F	; 95
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	8c 93       	st	X, r24
	SET(TIMSK,TOIE0);
     fc6:	a9 e5       	ldi	r26, 0x59	; 89
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e9 e5       	ldi	r30, 0x59	; 89
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	8c 93       	st	X, r24
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <TIMER0_vid_OVR_Interrupt_Disable>:


void TIMER0_vid_OVR_Interrupt_Disable(void)//overflow INT disable
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	CLEAR(TIMSK,TOIE0);
     fe2:	a9 e5       	ldi	r26, 0x59	; 89
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e9 e5       	ldi	r30, 0x59	; 89
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	8c 93       	st	X, r24
}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <TIMER0_vid_COMP_Interrupt_Enable>:

void TIMER0_vid_COMP_Interrupt_Enable(void)//comparing INT enable
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
	SET(SREG,GIE);
     ffe:	af e5       	ldi	r26, 0x5F	; 95
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ef e5       	ldi	r30, 0x5F	; 95
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	8c 93       	st	X, r24
	SET(TIMSK,OCIE0);
    100c:	a9 e5       	ldi	r26, 0x59	; 89
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e9 e5       	ldi	r30, 0x59	; 89
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	8c 93       	st	X, r24
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <TIMER0_vid_COMP_Interrupt_Disable>:

void TIMER0_vid_COMP_Interrupt_Disable(void)//comparing INT disable
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	CLEAR(TIMSK,OCIE0);
    1028:	a9 e5       	ldi	r26, 0x59	; 89
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e9 e5       	ldi	r30, 0x59	; 89
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8d 7f       	andi	r24, 0xFD	; 253
    1034:	8c 93       	st	X, r24
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <prescaller_value>:
//funs used in app
//funs by laws of timer
		//over flow mode
 uint16 prescaller[5]={1,8,64,256,1024};
	 uint16 prescaller_value()
	 {
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
		 return prescaller[TIMER_SELECT_ENABLE-1];
    1044:	80 91 6e 01 	lds	r24, 0x016E
    1048:	90 91 6f 01 	lds	r25, 0x016F
	 }
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <TIMER0_OCR_PWM_u8_calc>:
	uint16   TIMER0_OCR_PWM_u8_calc(float32 D)//to get OCR value
	{uint16  u8OCR_value; uint8 TOP=255;
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	27 97       	sbiw	r28, 0x07	; 7
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	6c 83       	std	Y+4, r22	; 0x04
    1068:	7d 83       	std	Y+5, r23	; 0x05
    106a:	8e 83       	std	Y+6, r24	; 0x06
    106c:	9f 83       	std	Y+7, r25	; 0x07
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	89 83       	std	Y+1, r24	; 0x01
			#elif TIMER_COMP_OUTPUT_MODE == SET_PWM_MODE//Inverted.
			u8OCR_value=TOP-(D*(TOP+1));
			#endif

	 	#elif TIMER_MODE_WAVE == CTC_MODE
		 u8OCR_value=D;
    1072:	6c 81       	ldd	r22, Y+4	; 0x04
    1074:	7d 81       	ldd	r23, Y+5	; 0x05
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9b 83       	std	Y+3, r25	; 0x03
    1084:	8a 83       	std	Y+2, r24	; 0x02
	 	#endif
		 return u8OCR_value;
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	9b 81       	ldd	r25, Y+3	; 0x03
	}
    108a:	27 96       	adiw	r28, 0x07	; 7
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <TWI_voidMasterInit>:
#include"i2c.h"
#include <util/delay.h>
#include <stdlib.h>

void TWI_voidMasterInit (void)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	//Set frequency to 400kbps
		CLEAR(TWSR,TWSR_TWPS0);
    10a4:	a1 e2       	ldi	r26, 0x21	; 33
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e2       	ldi	r30, 0x21	; 33
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8e 7f       	andi	r24, 0xFE	; 254
    10b0:	8c 93       	st	X, r24
		CLEAR(TWSR,TWSR_TWPS1);
    10b2:	a1 e2       	ldi	r26, 0x21	; 33
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e2       	ldi	r30, 0x21	; 33
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8d 7f       	andi	r24, 0xFD	; 253
    10be:	8c 93       	st	X, r24
		TWBR=12;
    10c0:	e0 e2       	ldi	r30, 0x20	; 32
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8c e0       	ldi	r24, 0x0C	; 12
    10c6:	80 83       	st	Z, r24

	//Enable TWI
		SET(TWCR,TWCR_TWEN);
    10c8:	a6 e5       	ldi	r26, 0x56	; 86
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e6 e5       	ldi	r30, 0x56	; 86
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	84 60       	ori	r24, 0x04	; 4
    10d4:	8c 93       	st	X, r24

}
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <TWI_voidSlaveInit>:
	SET_BIT(TWCR,TWCR_TWEN);
	return Local_Error;
}
*/
TWI_ErrorStatus TWI_voidSlaveInit(uint8 Copy_u8Address)
{   TWI_ErrorStatus Local_Error= NoError;
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <TWI_voidSlaveInit+0x6>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	8a 83       	std	Y+2, r24	; 0x02
    10e8:	19 82       	std	Y+1, r1	; 0x01
	/* ask if the slave address is one of the reserved addresses */
	if (( Copy_u8Address < SLAVE_MIN_RESERVED_ADD ) && (Copy_u8Address != SLAVE_GEN_CALL_ADD))
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	88 37       	cpi	r24, 0x78	; 120
    10ee:	a0 f4       	brcc	.+40     	; 0x1118 <TWI_voidSlaveInit+0x3c>
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	88 23       	and	r24, r24
    10f4:	89 f0       	breq	.+34     	; 0x1118 <TWI_voidSlaveInit+0x3c>
	{
				/*Set the slave address to the 7MSB of address register*/
		TWAR = ((Copy_u8Address<<1) | General_Call_SLAVE_recognition) ;
    10f6:	e2 e2       	ldi	r30, 0x22	; 34
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	80 83       	st	Z, r24
				/*Enable TWI */
		SET(TWCR,TWCR_TWEN);
    1108:	a6 e5       	ldi	r26, 0x56	; 86
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e6 e5       	ldi	r30, 0x56	; 86
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	84 60       	ori	r24, 0x04	; 4
    1114:	8c 93       	st	X, r24
    1116:	02 c0       	rjmp	.+4      	; 0x111c <TWI_voidSlaveInit+0x40>
	}
	else
	{
		Local_Error= ReservedAddressErr;
    1118:	87 e0       	ldi	r24, 0x07	; 7
    111a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Error;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <TWI_SendStartCondition>:

TWI_ErrorStatus TWI_SendStartCondition(void)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus Local_Error= NoError;
    1132:	19 82       	std	Y+1, r1	; 0x01

	/*Set the start condition*/
	SET(TWCR,TWCR_TWSTA);
    1134:	a6 e5       	ldi	r26, 0x56	; 86
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e6 e5       	ldi	r30, 0x56	; 86
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 62       	ori	r24, 0x20	; 32
    1140:	8c 93       	st	X, r24

	/*Clear interrupt flag to start the previous operation*/
	SET(TWCR,TWCR_TWINT);
    1142:	a6 e5       	ldi	r26, 0x56	; 86
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e6 e5       	ldi	r30, 0x56	; 86
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	8c 93       	st	X, r24


	/*Polling on the interrupt flag*/
	while((GET(TWCR,TWCR_TWINT))==0);
    1150:	e6 e5       	ldi	r30, 0x56	; 86
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	88 23       	and	r24, r24
    1158:	dc f7       	brge	.-10     	; 0x1150 <TWI_SendStartCondition+0x28>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != START_ACK)
    115a:	e1 e2       	ldi	r30, 0x21	; 33
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	88 7f       	andi	r24, 0xF8	; 248
    1166:	90 70       	andi	r25, 0x00	; 0
    1168:	88 30       	cpi	r24, 0x08	; 8
    116a:	91 05       	cpc	r25, r1
    116c:	11 f0       	breq	.+4      	; 0x1172 <TWI_SendStartCondition+0x4a>
	{
		Local_Error= StartConditionErr;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return Local_Error;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
}
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <TWI_SendRepeatedStart>:

TWI_ErrorStatus TWI_SendRepeatedStart(void)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	0f 92       	push	r0
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62

	TWI_ErrorStatus Local_Error= NoError;
    1186:	19 82       	std	Y+1, r1	; 0x01

	/*Set the start condition*/
	SET(TWCR,TWCR_TWSTA);
    1188:	a6 e5       	ldi	r26, 0x56	; 86
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e6 e5       	ldi	r30, 0x56	; 86
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 62       	ori	r24, 0x20	; 32
    1194:	8c 93       	st	X, r24

	/*Clear interrupt flag to start the previous operation*/
	SET(TWCR,TWCR_TWINT);
    1196:	a6 e5       	ldi	r26, 0x56	; 86
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e6 e5       	ldi	r30, 0x56	; 86
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	8c 93       	st	X, r24

	/*Polling on the interrupt flag*/
	while((GET(TWCR,TWCR_TWINT))==0);
    11a4:	e6 e5       	ldi	r30, 0x56	; 86
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	88 23       	and	r24, r24
    11ac:	dc f7       	brge	.-10     	; 0x11a4 <TWI_SendRepeatedStart+0x28>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != REP_START_ACK)
    11ae:	e1 e2       	ldi	r30, 0x21	; 33
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	88 7f       	andi	r24, 0xF8	; 248
    11ba:	90 70       	andi	r25, 0x00	; 0
    11bc:	80 31       	cpi	r24, 0x10	; 16
    11be:	91 05       	cpc	r25, r1
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <TWI_SendRepeatedStart+0x4a>
	{
		Local_Error= RepeatedStartError;
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrorStatus TWI_SendSlaveAddressWithWrite(uint8 Copy_u8SlaveAdress)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <TWI_SendSlaveAddressWithWrite+0x6>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_Error= NoError;
    11dc:	19 82       	std	Y+1, r1	; 0x01

	/*set the 7 bit slave address on the bus with write request*/
	TWDR= (Copy_u8SlaveAdress<<1);
    11de:	e3 e2       	ldi	r30, 0x23	; 35
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	88 0f       	add	r24, r24
    11e6:	80 83       	st	Z, r24

	/*Clear Start condition & Clear interrupt flag to start the previous operation*/
TWCR =0x84;
    11e8:	e6 e5       	ldi	r30, 0x56	; 86
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	84 e8       	ldi	r24, 0x84	; 132
    11ee:	80 83       	st	Z, r24
	/*Polling on the interrupt flag*/
	while((GET(TWCR,TWCR_TWINT))==0);
    11f0:	e6 e5       	ldi	r30, 0x56	; 86
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	88 23       	and	r24, r24
    11f8:	dc f7       	brge	.-10     	; 0x11f0 <TWI_SendSlaveAddressWithWrite+0x20>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
    11fa:	e1 e2       	ldi	r30, 0x21	; 33
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	88 7f       	andi	r24, 0xF8	; 248
    1206:	90 70       	andi	r25, 0x00	; 0
    1208:	88 31       	cpi	r24, 0x18	; 24
    120a:	91 05       	cpc	r25, r1
    120c:	11 f0       	breq	.+4      	; 0x1212 <TWI_SendSlaveAddressWithWrite+0x42>
	{
		Local_Error= SlaveAddressWithWriteErr;
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <TWI_SendSlaveAddressWithRead>:

TWI_ErrorStatus TWI_SendSlaveAddressWithRead(uint8 Copy_u8SlaveAdress)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <TWI_SendSlaveAddressWithRead+0x6>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_Error= NoError;
    122a:	19 82       	std	Y+1, r1	; 0x01


	/*set the 7 bit slave address on the bus with Read request*/
	TWDR= Copy_u8SlaveAdress<<1;
    122c:	e3 e2       	ldi	r30, 0x23	; 35
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 0f       	add	r24, r24
    1234:	80 83       	st	Z, r24
	SET(TWDR,0);
    1236:	a3 e2       	ldi	r26, 0x23	; 35
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e3 e2       	ldi	r30, 0x23	; 35
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	8c 93       	st	X, r24

	/*Clear start bit &Clear interrupt flag to start the previous operation*/
	TWCR =0x84;
    1244:	e6 e5       	ldi	r30, 0x56	; 86
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	84 e8       	ldi	r24, 0x84	; 132
    124a:	80 83       	st	Z, r24

	/*Polling on the interrupt flag*/
	while((GET(TWCR,TWCR_TWINT))==0);
    124c:	e6 e5       	ldi	r30, 0x56	; 86
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	88 23       	and	r24, r24
    1254:	dc f7       	brge	.-10     	; 0x124c <TWI_SendSlaveAddressWithRead+0x2e>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
    1256:	e1 e2       	ldi	r30, 0x21	; 33
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	88 7f       	andi	r24, 0xF8	; 248
    1262:	90 70       	andi	r25, 0x00	; 0
    1264:	80 34       	cpi	r24, 0x40	; 64
    1266:	91 05       	cpc	r25, r1
    1268:	11 f0       	breq	.+4      	; 0x126e <TWI_SendSlaveAddressWithRead+0x50>
	{
		Local_Error= SlaveAddressWithReadErr;
    126a:	84 e0       	ldi	r24, 0x04	; 4
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <TWI_MstrSendDataByte>:

TWI_ErrorStatus TWI_MstrSendDataByte(uint8 Copy_u8Data)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <TWI_MstrSendDataByte+0x6>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_Error= NoError;
    1286:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data in the data register*/
	TWDR= Copy_u8Data;
    1288:	e3 e2       	ldi	r30, 0x23	; 35
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	80 83       	st	Z, r24

	/*Clear interrupt flag to start the previous operation*/
	SET(TWCR,TWCR_TWINT);
    1290:	a6 e5       	ldi	r26, 0x56	; 86
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e6 e5       	ldi	r30, 0x56	; 86
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 68       	ori	r24, 0x80	; 128
    129c:	8c 93       	st	X, r24

	/*Polling on the interrupt flag*/
	while((GET(TWCR,TWCR_TWINT))==0);
    129e:	e6 e5       	ldi	r30, 0x56	; 86
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	dc f7       	brge	.-10     	; 0x129e <TWI_MstrSendDataByte+0x24>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != MSTR_WR_BYTE_ACK)
    12a8:	e1 e2       	ldi	r30, 0x21	; 33
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	88 7f       	andi	r24, 0xF8	; 248
    12b4:	90 70       	andi	r25, 0x00	; 0
    12b6:	88 32       	cpi	r24, 0x28	; 40
    12b8:	91 05       	cpc	r25, r1
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <TWI_MstrSendDataByte+0x46>
	{
		Local_Error= MstrWriteByteErr;
    12bc:	85 e0       	ldi	r24, 0x05	; 5
    12be:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <TWI_MstrReadDataByte>:

TWI_ErrorStatus TWI_MstrReadDataByte(uint8 *Copy_pu8Data)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <TWI_MstrReadDataByte+0x6>
    12d2:	0f 92       	push	r0
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	9b 83       	std	Y+3, r25	; 0x03
    12da:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus Local_Error= NoError;
    12dc:	19 82       	std	Y+1, r1	; 0x01
 if (Copy_pu8Data != NULL)
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	01 f1       	breq	.+64     	; 0x1326 <TWI_MstrReadDataByte+0x5a>
 {
	 /*Enable Acknowledge bit generation of master receiver*/
	 SET(TWCR,TWCR_TWEA);
    12e6:	a6 e5       	ldi	r26, 0x56	; 86
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e6 e5       	ldi	r30, 0x56	; 86
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 64       	ori	r24, 0x40	; 64
    12f2:	8c 93       	st	X, r24

	 /*Polling on the interrupt flag*/
	 while((GET(TWCR,TWCR_TWINT))==0);
    12f4:	e6 e5       	ldi	r30, 0x56	; 86
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	dc f7       	brge	.-10     	; 0x12f4 <TWI_MstrReadDataByte+0x28>

	 /*check on the operation status ID*/
	 if((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK)
    12fe:	e1 e2       	ldi	r30, 0x21	; 33
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	88 7f       	andi	r24, 0xF8	; 248
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	80 35       	cpi	r24, 0x50	; 80
    130e:	91 05       	cpc	r25, r1
    1310:	19 f0       	breq	.+6      	; 0x1318 <TWI_MstrReadDataByte+0x4c>
	 {
		 Local_Error= MstrReadByteWithAckErr;
    1312:	86 e0       	ldi	r24, 0x06	; 6
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	09 c0       	rjmp	.+18     	; 0x132a <TWI_MstrReadDataByte+0x5e>
	 }
	 else
	 {
		 *Copy_pu8Data= TWDR;
    1318:	e3 e2       	ldi	r30, 0x23	; 35
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	80 83       	st	Z, r24
    1324:	02 c0       	rjmp	.+4      	; 0x132a <TWI_MstrReadDataByte+0x5e>
	 }
 }
 else
 {
	Local_Error=NULLPOINTERDATA;
    1326:	88 e0       	ldi	r24, 0x08	; 8
    1328:	89 83       	std	Y+1, r24	; 0x01
 }
	return Local_Error;
    132a:	89 81       	ldd	r24, Y+1	; 0x01
}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62


	/*Set the stop condition bit*/
	SET(TWCR,TWCR_TWSTO);
    1340:	a6 e5       	ldi	r26, 0x56	; 86
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e6 e5       	ldi	r30, 0x56	; 86
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 61       	ori	r24, 0x10	; 16
    134c:	8c 93       	st	X, r24

	/*Clear interrupt flag to start the previous operation*/
	SET(TWCR,TWCR_TWINT);
    134e:	a6 e5       	ldi	r26, 0x56	; 86
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e6 e5       	ldi	r30, 0x56	; 86
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 68       	ori	r24, 0x80	; 128
    135a:	8c 93       	st	X, r24
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <EEPROM_SendDataByte>:
/************************************************************************/
/* EEPROM External 24c                                                                     */
/************************************************************************/
//write data on EEPROM by TWI
TWI_ErrorStatus EEPROM_SendDataByte(uint16 Copy_u16Adress,uint8 Copy_u8Data)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	63 97       	sbiw	r28, 0x13	; 19
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	9a 8b       	std	Y+18, r25	; 0x12
    1378:	89 8b       	std	Y+17, r24	; 0x11
    137a:	6b 8b       	std	Y+19, r22	; 0x13
	TWI_ErrorStatus Local_Error =NoError;
    137c:	18 8a       	std	Y+16, r1	; 0x10
	//Set the start condition

	if ( TWI_SendStartCondition() != NoError)
    137e:	0e 94 94 08 	call	0x1128	; 0x1128 <TWI_SendStartCondition>
    1382:	88 23       	and	r24, r24
    1384:	11 f0       	breq	.+4      	; 0x138a <EEPROM_SendDataByte+0x28>
	{
		 Local_Error = StartConditionErr;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	88 8b       	std	Y+16, r24	; 0x10
#elif EEPROME_24C_TYPE == EEPROME_24C08
// EEPROME Device Address
 EEPROMAdress = EEPROM_FIXED_ADD_PART | (EEPROM_A2_VALUE<<2) | ((Copy_u16Adress>>8) & 0x3);
 #elif EEPROME_24C_TYPE == EEPROME_24C16
// EEPROME Device Address
 EEPROMAdress = EEPROM_FIXED_ADD_PART | ((Copy_u16Adress>>8) & 0x7);
    138a:	89 89       	ldd	r24, Y+17	; 0x11
    138c:	9a 89       	ldd	r25, Y+18	; 0x12
    138e:	89 2f       	mov	r24, r25
    1390:	99 27       	eor	r25, r25
    1392:	87 70       	andi	r24, 0x07	; 7
    1394:	80 65       	ori	r24, 0x50	; 80
    1396:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	if ( TWI_SendSlaveAddressWithWrite(EEPROMAdress) != NoError)
    1398:	8f 85       	ldd	r24, Y+15	; 0x0f
    139a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_SendSlaveAddressWithWrite>
    139e:	88 23       	and	r24, r24
    13a0:	11 f0       	breq	.+4      	; 0x13a6 <EEPROM_SendDataByte+0x44>
	{
		 Local_Error = SlaveAddressWithWriteErr;
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	88 8b       	std	Y+16, r24	; 0x10
	}

	if ( TWI_MstrSendDataByte((uint8)Copy_u16Adress) != NoError)
    13a6:	89 89       	ldd	r24, Y+17	; 0x11
    13a8:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_MstrSendDataByte>
    13ac:	88 23       	and	r24, r24
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <EEPROM_SendDataByte+0x52>
	{
		 Local_Error = SlaveAddressWithWriteErr;
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	88 8b       	std	Y+16, r24	; 0x10
	}

	if ( TWI_MstrSendDataByte(Copy_u8Data) != NoError)
    13b4:	8b 89       	ldd	r24, Y+19	; 0x13
    13b6:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_MstrSendDataByte>
    13ba:	88 23       	and	r24, r24
    13bc:	11 f0       	breq	.+4      	; 0x13c2 <EEPROM_SendDataByte+0x60>
	{
		 Local_Error = MstrWriteByteErr;
    13be:	85 e0       	ldi	r24, 0x05	; 5
    13c0:	88 8b       	std	Y+16, r24	; 0x10
	}


 TWI_SendStopCondition();
    13c2:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_SendStopCondition>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e2       	ldi	r26, 0x20	; 32
    13cc:	b1 e4       	ldi	r27, 0x41	; 65
    13ce:	8b 87       	std	Y+11, r24	; 0x0b
    13d0:	9c 87       	std	Y+12, r25	; 0x0c
    13d2:	ad 87       	std	Y+13, r26	; 0x0d
    13d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13da:	8d 85       	ldd	r24, Y+13	; 0x0d
    13dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a e7       	ldi	r20, 0x7A	; 122
    13e4:	55 e4       	ldi	r21, 0x45	; 69
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8f 83       	std	Y+7, r24	; 0x07
    13f0:	98 87       	std	Y+8, r25	; 0x08
    13f2:	a9 87       	std	Y+9, r26	; 0x09
    13f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f6:	6f 81       	ldd	r22, Y+7	; 0x07
    13f8:	78 85       	ldd	r23, Y+8	; 0x08
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <EEPROM_SendDataByte+0xb6>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <EEPROM_SendDataByte+0x134>
	else if (__tmp > 65535)
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <EEPROM_SendDataByte+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	6b 85       	ldd	r22, Y+11	; 0x0b
    1432:	7c 85       	ldd	r23, Y+12	; 0x0c
    1434:	8d 85       	ldd	r24, Y+13	; 0x0d
    1436:	9e 85       	ldd	r25, Y+14	; 0x0e
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <EEPROM_SendDataByte+0x116>
    145a:	80 e9       	ldi	r24, 0x90	; 144
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	9c 83       	std	Y+4, r25	; 0x04
    1460:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <EEPROM_SendDataByte+0x104>
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <EEPROM_SendDataByte+0xf8>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <EEPROM_SendDataByte+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <EEPROM_SendDataByte+0x140>
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(10);
	  return Local_Error;
    14aa:	88 89       	ldd	r24, Y+16	; 0x10
}
    14ac:	63 96       	adiw	r28, 0x13	; 19
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <EEPROM_ReadDataByte>:

//Read data from EEPROM by TWI
TWI_ErrorStatus EEPROM_ReadDataByte(uint16 Copy_u16Adress,uint8 *Copy_pu8Data)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <EEPROM_ReadDataByte+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <EEPROM_ReadDataByte+0x8>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <EEPROM_ReadDataByte+0xa>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	8b 83       	std	Y+3, r24	; 0x03
    14d0:	7e 83       	std	Y+6, r23	; 0x06
    14d2:	6d 83       	std	Y+5, r22	; 0x05
	TWI_ErrorStatus Local_Error =NoError ;
    14d4:	1a 82       	std	Y+2, r1	; 0x02
	//Set the start condition

	if ( TWI_SendStartCondition() != NoError)
    14d6:	0e 94 94 08 	call	0x1128	; 0x1128 <TWI_SendStartCondition>
    14da:	88 23       	and	r24, r24
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <EEPROM_ReadDataByte+0x24>
	{Local_Error = StartConditionErr;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	8a 83       	std	Y+2, r24	; 0x02
	#elif EEPROME_24C_TYPE == EEPROME_24C08
	// EEPROME Device Address
	EEPROMAdress = EEPROM_FIXED_ADD_PART | (EEPROM_A2_VALUE<<2) | ((Copy_u16Adress>>8) & 0x3);
	#elif EEPROME_24C_TYPE == EEPROME_24C16
	// EEPROME Device Address
	EEPROMAdress = EEPROM_FIXED_ADD_PART | ((Copy_u16Adress>>8) & 0x7);
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	89 2f       	mov	r24, r25
    14e8:	99 27       	eor	r25, r25
    14ea:	87 70       	andi	r24, 0x07	; 7
    14ec:	80 65       	ori	r24, 0x50	; 80
    14ee:	89 83       	std	Y+1, r24	; 0x01
	#endif

	if ( TWI_SendSlaveAddressWithWrite(EEPROMAdress) != NoError)
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <TWI_SendSlaveAddressWithWrite>
    14f6:	88 23       	and	r24, r24
    14f8:	11 f0       	breq	.+4      	; 0x14fe <EEPROM_ReadDataByte+0x40>
	{
		Local_Error = SlaveAddressWithWriteErr;
    14fa:	83 e0       	ldi	r24, 0x03	; 3
    14fc:	8a 83       	std	Y+2, r24	; 0x02
	}

	if ( TWI_MstrSendDataByte((uint8)Copy_u16Adress) != NoError)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_MstrSendDataByte>
    1504:	88 23       	and	r24, r24
    1506:	11 f0       	breq	.+4      	; 0x150c <EEPROM_ReadDataByte+0x4e>
	{
		 Local_Error = SlaveAddressWithWriteErr;
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	8a 83       	std	Y+2, r24	; 0x02
	}

	if ( TWI_SendRepeatedStart() != NoError)
    150c:	0e 94 be 08 	call	0x117c	; 0x117c <TWI_SendRepeatedStart>
    1510:	88 23       	and	r24, r24
    1512:	11 f0       	breq	.+4      	; 0x1518 <EEPROM_ReadDataByte+0x5a>
	{
		 Local_Error = RepeatedStartError;
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	8a 83       	std	Y+2, r24	; 0x02
	}

	if ( TWI_SendSlaveAddressWithRead(EEPROMAdress) != NoError)
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	0e 94 0f 09 	call	0x121e	; 0x121e <TWI_SendSlaveAddressWithRead>
    151e:	88 23       	and	r24, r24
    1520:	11 f0       	breq	.+4      	; 0x1526 <EEPROM_ReadDataByte+0x68>
	{
		 Local_Error = SlaveAddressWithReadErr;
    1522:	84 e0       	ldi	r24, 0x04	; 4
    1524:	8a 83       	std	Y+2, r24	; 0x02
	}

	if ( TWI_MstrReadDataByte(Copy_pu8Data) != NoError)
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	0e 94 66 09 	call	0x12cc	; 0x12cc <TWI_MstrReadDataByte>
    152e:	88 23       	and	r24, r24
    1530:	11 f0       	breq	.+4      	; 0x1536 <EEPROM_ReadDataByte+0x78>
	{
		 Local_Error = MstrWriteByteErr;
    1532:	85 e0       	ldi	r24, 0x05	; 5
    1534:	8a 83       	std	Y+2, r24	; 0x02
	}

	TWI_SendStopCondition();
    1536:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_SendStopCondition>

	return Local_Error;
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    153c:	26 96       	adiw	r28, 0x06	; 6
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <__vector_1>:
#include "../../Serv/bit_math.h"
#include "ext_reg.h"
#include "ext_conf.h"
#include "ext_init.h"

ISR(INT0_VECTRO){
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	ISR_FUN_INT0();
    1578:	e0 91 b9 01 	lds	r30, 0x01B9
    157c:	f0 91 ba 01 	lds	r31, 0x01BA
    1580:	09 95       	icall
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <__vector_2>:
ISR(INT1_VECTRO){
    15a8:	1f 92       	push	r1
    15aa:	0f 92       	push	r0
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	0f 92       	push	r0
    15b0:	11 24       	eor	r1, r1
    15b2:	2f 93       	push	r18
    15b4:	3f 93       	push	r19
    15b6:	4f 93       	push	r20
    15b8:	5f 93       	push	r21
    15ba:	6f 93       	push	r22
    15bc:	7f 93       	push	r23
    15be:	8f 93       	push	r24
    15c0:	9f 93       	push	r25
    15c2:	af 93       	push	r26
    15c4:	bf 93       	push	r27
    15c6:	ef 93       	push	r30
    15c8:	ff 93       	push	r31
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	ISR_FUN_INT1();
    15d2:	e0 91 b7 01 	lds	r30, 0x01B7
    15d6:	f0 91 b8 01 	lds	r31, 0x01B8
    15da:	09 95       	icall
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	0f 90       	pop	r0
    15fe:	1f 90       	pop	r1
    1600:	18 95       	reti

00001602 <__vector_3>:
ISR(INT2_VECTRO){
    1602:	1f 92       	push	r1
    1604:	0f 92       	push	r0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	0f 92       	push	r0
    160a:	11 24       	eor	r1, r1
    160c:	2f 93       	push	r18
    160e:	3f 93       	push	r19
    1610:	4f 93       	push	r20
    1612:	5f 93       	push	r21
    1614:	6f 93       	push	r22
    1616:	7f 93       	push	r23
    1618:	8f 93       	push	r24
    161a:	9f 93       	push	r25
    161c:	af 93       	push	r26
    161e:	bf 93       	push	r27
    1620:	ef 93       	push	r30
    1622:	ff 93       	push	r31
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	ISR_FUN_INT2();
    162c:	e0 91 b5 01 	lds	r30, 0x01B5
    1630:	f0 91 b6 01 	lds	r31, 0x01B6
    1634:	09 95       	icall
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <EXT_vidInit>:


void EXT_vidControlInt0(uint8 u8StCopy);
void EXT_vidControlInt1(uint8 u8StCopy);
void EXT_vidControlInt2(uint8 u8StCopy);
void EXT_vidInit(uint8 u8ExtIntNum, uint8 u8ISRStCont){
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <EXT_vidInit+0x6>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <EXT_vidInit+0x8>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	6a 83       	std	Y+2, r22	; 0x02
	SET(SREG,GIE);
    166c:	af e5       	ldi	r26, 0x5F	; 95
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ef e5       	ldi	r30, 0x5F	; 95
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	8c 93       	st	X, r24
	switch(u8ExtIntNum){
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3c 83       	std	Y+4, r19	; 0x04
    1682:	2b 83       	std	Y+3, r18	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	a1 f0       	breq	.+40     	; 0x16b6 <EXT_vidInit+0x5a>
    168e:	2b 81       	ldd	r18, Y+3	; 0x03
    1690:	3c 81       	ldd	r19, Y+4	; 0x04
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	d1 f0       	breq	.+52     	; 0x16cc <EXT_vidInit+0x70>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	01 f5       	brne	.+64     	; 0x16e0 <EXT_vidInit+0x84>
	case INT0_CONF:
		EXT_vidControlInt0(u8ISRStCont);
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <EXT_vidControlInt0>
		SET(GICR,INT0);
    16a6:	ab e5       	ldi	r26, 0x5B	; 91
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e5       	ldi	r30, 0x5B	; 91
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	8c 93       	st	X, r24
    16b4:	15 c0       	rjmp	.+42     	; 0x16e0 <EXT_vidInit+0x84>
		break;
	case INT1_CONF:
		EXT_vidControlInt1(u8ISRStCont);
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <EXT_vidControlInt1>
		SET(GICR,INT1);
    16bc:	ab e5       	ldi	r26, 0x5B	; 91
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e5       	ldi	r30, 0x5B	; 91
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 68       	ori	r24, 0x80	; 128
    16c8:	8c 93       	st	X, r24
    16ca:	0a c0       	rjmp	.+20     	; 0x16e0 <EXT_vidInit+0x84>
		break;
	case INT2_CONF:
		EXT_vidControlInt2(u8ISRStCont);
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	0e 94 45 0c 	call	0x188a	; 0x188a <EXT_vidControlInt2>
		SET(GICR,INT2);
    16d2:	ab e5       	ldi	r26, 0x5B	; 91
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	eb e5       	ldi	r30, 0x5B	; 91
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 62       	ori	r24, 0x20	; 32
    16de:	8c 93       	st	X, r24
		break;
	}
}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <EXT_vidControlInt0>:

void EXT_vidControlInt0(uint8 u8StCopy){
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <EXT_vidControlInt0+0x6>
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
	switch(u8StCopy){
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3b 83       	std	Y+3, r19	; 0x03
    1704:	2a 83       	std	Y+2, r18	; 0x02
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	21 f1       	breq	.+72     	; 0x1758 <EXT_vidControlInt0+0x6a>
    1710:	2a 81       	ldd	r18, Y+2	; 0x02
    1712:	3b 81       	ldd	r19, Y+3	; 0x03
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	2c f4       	brge	.+10     	; 0x1724 <EXT_vidControlInt0+0x36>
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	61 f0       	breq	.+24     	; 0x173a <EXT_vidControlInt0+0x4c>
    1722:	46 c0       	rjmp	.+140    	; 0x17b0 <EXT_vidControlInt0+0xc2>
    1724:	2a 81       	ldd	r18, Y+2	; 0x02
    1726:	3b 81       	ldd	r19, Y+3	; 0x03
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	21 f1       	breq	.+72     	; 0x1776 <EXT_vidControlInt0+0x88>
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	9b 81       	ldd	r25, Y+3	; 0x03
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	91 05       	cpc	r25, r1
    1736:	71 f1       	breq	.+92     	; 0x1794 <EXT_vidControlInt0+0xa6>
    1738:	3b c0       	rjmp	.+118    	; 0x17b0 <EXT_vidControlInt0+0xc2>
	case FALLING:
		CLEAR(MCUCR,ISC00);
    173a:	a5 e5       	ldi	r26, 0x55	; 85
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e5       	ldi	r30, 0x55	; 85
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
		SET(MCUCR,ISC01);
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	8c 93       	st	X, r24
    1756:	2c c0       	rjmp	.+88     	; 0x17b0 <EXT_vidControlInt0+0xc2>
		break;
	case RISSING:
		SET(MCUCR,ISC00);
    1758:	a5 e5       	ldi	r26, 0x55	; 85
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e5       	ldi	r30, 0x55	; 85
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	81 60       	ori	r24, 0x01	; 1
    1764:	8c 93       	st	X, r24
		SET(MCUCR,ISC01);
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	8c 93       	st	X, r24
    1774:	1d c0       	rjmp	.+58     	; 0x17b0 <EXT_vidControlInt0+0xc2>
		break;
	case LOW_:
		CLEAR(MCUCR,ISC00);
    1776:	a5 e5       	ldi	r26, 0x55	; 85
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e5       	ldi	r30, 0x55	; 85
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8e 7f       	andi	r24, 0xFE	; 254
    1782:	8c 93       	st	X, r24
		CLEAR(MCUCR,ISC01);
    1784:	a5 e5       	ldi	r26, 0x55	; 85
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e5       	ldi	r30, 0x55	; 85
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8d 7f       	andi	r24, 0xFD	; 253
    1790:	8c 93       	st	X, r24
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <EXT_vidControlInt0+0xc2>
		break;
	case ANY_LOG:
		SET(MCUCR,ISC00);
    1794:	a5 e5       	ldi	r26, 0x55	; 85
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e5       	ldi	r30, 0x55	; 85
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	8c 93       	st	X, r24
		CLEAR(MCUCR,ISC01);
    17a2:	a5 e5       	ldi	r26, 0x55	; 85
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e5 e5       	ldi	r30, 0x55	; 85
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8d 7f       	andi	r24, 0xFD	; 253
    17ae:	8c 93       	st	X, r24
		break;
	}
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <EXT_vidControlInt1>:
void EXT_vidControlInt1(uint8 u8StCopy){
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <EXT_vidControlInt1+0x6>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
	switch(u8StCopy){
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	3b 83       	std	Y+3, r19	; 0x03
    17d2:	2a 83       	std	Y+2, r18	; 0x02
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	91 05       	cpc	r25, r1
    17dc:	21 f1       	breq	.+72     	; 0x1826 <EXT_vidControlInt1+0x6a>
    17de:	2a 81       	ldd	r18, Y+2	; 0x02
    17e0:	3b 81       	ldd	r19, Y+3	; 0x03
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	31 05       	cpc	r19, r1
    17e6:	2c f4       	brge	.+10     	; 0x17f2 <EXT_vidControlInt1+0x36>
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	61 f0       	breq	.+24     	; 0x1808 <EXT_vidControlInt1+0x4c>
    17f0:	46 c0       	rjmp	.+140    	; 0x187e <EXT_vidControlInt1+0xc2>
    17f2:	2a 81       	ldd	r18, Y+2	; 0x02
    17f4:	3b 81       	ldd	r19, Y+3	; 0x03
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	21 f1       	breq	.+72     	; 0x1844 <EXT_vidControlInt1+0x88>
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	91 05       	cpc	r25, r1
    1804:	71 f1       	breq	.+92     	; 0x1862 <EXT_vidControlInt1+0xa6>
    1806:	3b c0       	rjmp	.+118    	; 0x187e <EXT_vidControlInt1+0xc2>
	case FALLING:
		CLEAR(MCUCR,ISC10);
    1808:	a5 e5       	ldi	r26, 0x55	; 85
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e5 e5       	ldi	r30, 0x55	; 85
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8b 7f       	andi	r24, 0xFB	; 251
    1814:	8c 93       	st	X, r24
		SET(MCUCR,ISC11);
    1816:	a5 e5       	ldi	r26, 0x55	; 85
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e5       	ldi	r30, 0x55	; 85
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	88 60       	ori	r24, 0x08	; 8
    1822:	8c 93       	st	X, r24
    1824:	2c c0       	rjmp	.+88     	; 0x187e <EXT_vidControlInt1+0xc2>
		break;
	case RISSING:
		SET(MCUCR,ISC10);
    1826:	a5 e5       	ldi	r26, 0x55	; 85
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e5 e5       	ldi	r30, 0x55	; 85
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	84 60       	ori	r24, 0x04	; 4
    1832:	8c 93       	st	X, r24
		SET(MCUCR,ISC11);
    1834:	a5 e5       	ldi	r26, 0x55	; 85
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e5 e5       	ldi	r30, 0x55	; 85
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	88 60       	ori	r24, 0x08	; 8
    1840:	8c 93       	st	X, r24
    1842:	1d c0       	rjmp	.+58     	; 0x187e <EXT_vidControlInt1+0xc2>
		break;
	case LOW_:
		CLEAR(MCUCR,ISC10);
    1844:	a5 e5       	ldi	r26, 0x55	; 85
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e5 e5       	ldi	r30, 0x55	; 85
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8b 7f       	andi	r24, 0xFB	; 251
    1850:	8c 93       	st	X, r24
		CLEAR(MCUCR,ISC11);
    1852:	a5 e5       	ldi	r26, 0x55	; 85
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e5       	ldi	r30, 0x55	; 85
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	87 7f       	andi	r24, 0xF7	; 247
    185e:	8c 93       	st	X, r24
    1860:	0e c0       	rjmp	.+28     	; 0x187e <EXT_vidControlInt1+0xc2>
		break;
	case ANY_LOG:
		SET(MCUCR,ISC10);
    1862:	a5 e5       	ldi	r26, 0x55	; 85
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e5 e5       	ldi	r30, 0x55	; 85
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	84 60       	ori	r24, 0x04	; 4
    186e:	8c 93       	st	X, r24
		CLEAR(MCUCR,ISC11);
    1870:	a5 e5       	ldi	r26, 0x55	; 85
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e5 e5       	ldi	r30, 0x55	; 85
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	87 7f       	andi	r24, 0xF7	; 247
    187c:	8c 93       	st	X, r24
		break;
	}
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <EXT_vidControlInt2>:
void EXT_vidControlInt2(uint8 u8StCopy){
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <EXT_vidControlInt2+0x6>
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	89 83       	std	Y+1, r24	; 0x01
	switch(u8StCopy){
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3b 83       	std	Y+3, r19	; 0x03
    18a0:	2a 83       	std	Y+2, r18	; 0x02
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	9b 81       	ldd	r25, Y+3	; 0x03
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <EXT_vidControlInt2+0x2c>
    18aa:	2a 81       	ldd	r18, Y+2	; 0x02
    18ac:	3b 81       	ldd	r19, Y+3	; 0x03
    18ae:	21 30       	cpi	r18, 0x01	; 1
    18b0:	31 05       	cpc	r19, r1
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <EXT_vidControlInt2+0x3c>
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <EXT_vidControlInt2+0x4a>
	case FALLING:
		CLEAR(MCUCSR,ISC2);
    18b6:	a4 e5       	ldi	r26, 0x54	; 84
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e4 e5       	ldi	r30, 0x54	; 84
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8f 7b       	andi	r24, 0xBF	; 191
    18c2:	8c 93       	st	X, r24
    18c4:	07 c0       	rjmp	.+14     	; 0x18d4 <EXT_vidControlInt2+0x4a>
		break;
	case RISSING:
		SET(MCUCSR,ISC2);
    18c6:	a4 e5       	ldi	r26, 0x54	; 84
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e4 e5       	ldi	r30, 0x54	; 84
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 64       	ori	r24, 0x40	; 64
    18d2:	8c 93       	st	X, r24
		break;
	}
}
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <DIO_vidSetPortDir>:
volatile uint8 *Arr_Dir[4]={DDRA_REG,DDRB_REG,DDRC_REG,DDRD_REG};
volatile uint8 *Arr_PORT[4]={PORTA_REG,PORTB_REG,PORTC_REG,PORTD_REG};
volatile uint8 *Arr_PIN[4]={PINA_REG,PINB_REG,PINC_REG,PIND_REG};


void DIO_vidSetPortDir(uint8 u8PortVal,uint8 u8DirVal){
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <DIO_vidSetPortDir+0x6>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	6a 83       	std	Y+2, r22	; 0x02
	if(u8PortVal <= PORTD){
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	68 f4       	brcc	.+26     	; 0x190e <DIO_vidSetPortDir+0x2e>
		*Arr_Dir[u8PortVal]=u8DirVal;
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	fc 01       	movw	r30, r24
    1900:	ee 58       	subi	r30, 0x8E	; 142
    1902:	fe 4f       	sbci	r31, 0xFE	; 254
    1904:	01 90       	ld	r0, Z+
    1906:	f0 81       	ld	r31, Z
    1908:	e0 2d       	mov	r30, r0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
	}
	else{
	}

}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <DIO_vidSetPortVal>:
void DIO_vidSetPortVal(uint8 u8PortVal,uint8 u8Val){
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <DIO_vidSetPortVal+0x6>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	6a 83       	std	Y+2, r22	; 0x02
	if(u8PortVal <= PORTD){
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	68 f4       	brcc	.+26     	; 0x1946 <DIO_vidSetPortVal+0x2e>
		*Arr_PORT[u8PortVal]=u8Val;
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	fc 01       	movw	r30, r24
    1938:	e6 58       	subi	r30, 0x86	; 134
    193a:	fe 4f       	sbci	r31, 0xFE	; 254
    193c:	01 90       	ld	r0, Z+
    193e:	f0 81       	ld	r31, Z
    1940:	e0 2d       	mov	r30, r0
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	80 83       	st	Z, r24
	}
	else{
	}
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <DIO_u8GetPortVal>:



uint8 DIO_u8GetPortVal(uint8 u8PortVal){
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_u8GetPortVal+0x6>
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Get_Port;
	if(u8PortVal <= PORTD){
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	84 30       	cpi	r24, 0x04	; 4
    1960:	68 f4       	brcc	.+26     	; 0x197c <DIO_u8GetPortVal+0x2c>
		Get_Port=*Arr_PIN[u8PortVal];
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	fc 01       	movw	r30, r24
    196e:	ee 57       	subi	r30, 0x7E	; 126
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	01 90       	ld	r0, Z+
    1974:	f0 81       	ld	r31, Z
    1976:	e0 2d       	mov	r30, r0
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
	}
	return Get_Port;
    197c:	89 81       	ldd	r24, Y+1	; 0x01
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <DIO_vidSetPinDir>:

/*************PORTA[0~7]-PORTB[8~15]-PORTC[16~23]-PORTD[24~31]*************/

void DIO_vidSetPinDir(uint8 u8PinNum,uint8 u8DirVal){
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <DIO_vidSetPinDir+0x6>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	6a 83       	std	Y+2, r22	; 0x02
	if(u8PinNum>=0 && u8PinNum<=31){
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	80 32       	cpi	r24, 0x20	; 32
    199a:	08 f0       	brcs	.+2      	; 0x199e <DIO_vidSetPinDir+0x16>
    199c:	62 c0       	rjmp	.+196    	; 0x1a62 <DIO_vidSetPinDir+0xda>
		if(u8DirVal == INPUT_PIN){
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	88 23       	and	r24, r24
    19a2:	79 f5       	brne	.+94     	; 0x1a02 <DIO_vidSetPinDir+0x7a>
			CLEAR(*Arr_Dir[(u8PinNum/8)],(u8PinNum%8));
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	86 95       	lsr	r24
    19a8:	86 95       	lsr	r24
    19aa:	86 95       	lsr	r24
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	fc 01       	movw	r30, r24
    19b6:	ee 58       	subi	r30, 0x8E	; 142
    19b8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ba:	a0 81       	ld	r26, Z
    19bc:	b1 81       	ldd	r27, Z+1	; 0x01
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	86 95       	lsr	r24
    19c2:	86 95       	lsr	r24
    19c4:	86 95       	lsr	r24
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	fc 01       	movw	r30, r24
    19d0:	ee 58       	subi	r30, 0x8E	; 142
    19d2:	fe 4f       	sbci	r31, 0xFE	; 254
    19d4:	01 90       	ld	r0, Z+
    19d6:	f0 81       	ld	r31, Z
    19d8:	e0 2d       	mov	r30, r0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	88 2f       	mov	r24, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9c 01       	movw	r18, r24
    19e6:	27 70       	andi	r18, 0x07	; 7
    19e8:	30 70       	andi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_vidSetPinDir+0x6e>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_vidSetPinDir+0x6a>
    19fa:	80 95       	com	r24
    19fc:	84 23       	and	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	30 c0       	rjmp	.+96     	; 0x1a62 <DIO_vidSetPinDir+0xda>
		}else if(u8DirVal == OUTPUT_PIN) {
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	69 f5       	brne	.+90     	; 0x1a62 <DIO_vidSetPinDir+0xda>
			SET(*Arr_Dir[(u8PinNum/8)],(u8PinNum%8));
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	86 95       	lsr	r24
    1a0c:	86 95       	lsr	r24
    1a0e:	86 95       	lsr	r24
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	fc 01       	movw	r30, r24
    1a1a:	ee 58       	subi	r30, 0x8E	; 142
    1a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1e:	a0 81       	ld	r26, Z
    1a20:	b1 81       	ldd	r27, Z+1	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	86 95       	lsr	r24
    1a26:	86 95       	lsr	r24
    1a28:	86 95       	lsr	r24
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	fc 01       	movw	r30, r24
    1a34:	ee 58       	subi	r30, 0x8E	; 142
    1a36:	fe 4f       	sbci	r31, 0xFE	; 254
    1a38:	01 90       	ld	r0, Z+
    1a3a:	f0 81       	ld	r31, Z
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 01       	movw	r18, r24
    1a4a:	27 70       	andi	r18, 0x07	; 7
    1a4c:	30 70       	andi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_vidSetPinDir+0xd2>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_vidSetPinDir+0xce>
    1a5e:	84 2b       	or	r24, r20
    1a60:	8c 93       	st	X, r24
		}
	}
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <DIO_vidSetPinVal>:
void DIO_vidSetPinVal(uint8 u8PinNum,uint8 u8PinVal){
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <DIO_vidSetPinVal+0x6>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	6a 83       	std	Y+2, r22	; 0x02
	if(u8PinNum>=0 && u8PinNum<=31){
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	80 32       	cpi	r24, 0x20	; 32
    1a7e:	08 f0       	brcs	.+2      	; 0x1a82 <DIO_vidSetPinVal+0x16>
    1a80:	93 c0       	rjmp	.+294    	; 0x1ba8 <DIO_vidSetPinVal+0x13c>
		if(u8PinVal == LOW){
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	88 23       	and	r24, r24
    1a86:	79 f5       	brne	.+94     	; 0x1ae6 <DIO_vidSetPinVal+0x7a>
			CLEAR(*Arr_PORT[(u8PinNum/8)],(u8PinNum%8));
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	86 95       	lsr	r24
    1a8c:	86 95       	lsr	r24
    1a8e:	86 95       	lsr	r24
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	fc 01       	movw	r30, r24
    1a9a:	e6 58       	subi	r30, 0x86	; 134
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	a0 81       	ld	r26, Z
    1aa0:	b1 81       	ldd	r27, Z+1	; 0x01
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	e6 58       	subi	r30, 0x86	; 134
    1ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab8:	01 90       	ld	r0, Z+
    1aba:	f0 81       	ld	r31, Z
    1abc:	e0 2d       	mov	r30, r0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9c 01       	movw	r18, r24
    1aca:	27 70       	andi	r18, 0x07	; 7
    1acc:	30 70       	andi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <DIO_vidSetPinVal+0x6e>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <DIO_vidSetPinVal+0x6a>
    1ade:	80 95       	com	r24
    1ae0:	84 23       	and	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	61 c0       	rjmp	.+194    	; 0x1ba8 <DIO_vidSetPinVal+0x13c>
		}else if(u8PinVal == HIGH) {
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	71 f5       	brne	.+92     	; 0x1b48 <DIO_vidSetPinVal+0xdc>
			SET(*Arr_PORT[(u8PinNum/8)],(u8PinNum%8));
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	86 95       	lsr	r24
    1af0:	86 95       	lsr	r24
    1af2:	86 95       	lsr	r24
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	fc 01       	movw	r30, r24
    1afe:	e6 58       	subi	r30, 0x86	; 134
    1b00:	fe 4f       	sbci	r31, 0xFE	; 254
    1b02:	a0 81       	ld	r26, Z
    1b04:	b1 81       	ldd	r27, Z+1	; 0x01
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	86 95       	lsr	r24
    1b0a:	86 95       	lsr	r24
    1b0c:	86 95       	lsr	r24
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	fc 01       	movw	r30, r24
    1b18:	e6 58       	subi	r30, 0x86	; 134
    1b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1c:	01 90       	ld	r0, Z+
    1b1e:	f0 81       	ld	r31, Z
    1b20:	e0 2d       	mov	r30, r0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	27 70       	andi	r18, 0x07	; 7
    1b30:	30 70       	andi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_vidSetPinVal+0xd2>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <DIO_vidSetPinVal+0xce>
    1b42:	84 2b       	or	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	30 c0       	rjmp	.+96     	; 0x1ba8 <DIO_vidSetPinVal+0x13c>
		}else if(u8PinVal == TOGGLE_){
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	69 f5       	brne	.+90     	; 0x1ba8 <DIO_vidSetPinVal+0x13c>
			TOGGLE(*Arr_PORT[(u8PinNum/8)],(u8PinNum%8));
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	86 95       	lsr	r24
    1b52:	86 95       	lsr	r24
    1b54:	86 95       	lsr	r24
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	fc 01       	movw	r30, r24
    1b60:	e6 58       	subi	r30, 0x86	; 134
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	a0 81       	ld	r26, Z
    1b66:	b1 81       	ldd	r27, Z+1	; 0x01
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	86 95       	lsr	r24
    1b6c:	86 95       	lsr	r24
    1b6e:	86 95       	lsr	r24
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e6 58       	subi	r30, 0x86	; 134
    1b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7e:	01 90       	ld	r0, Z+
    1b80:	f0 81       	ld	r31, Z
    1b82:	e0 2d       	mov	r30, r0
    1b84:	80 81       	ld	r24, Z
    1b86:	48 2f       	mov	r20, r24
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9c 01       	movw	r18, r24
    1b90:	27 70       	andi	r18, 0x07	; 7
    1b92:	30 70       	andi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 2e       	mov	r0, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_vidSetPinVal+0x134>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	0a 94       	dec	r0
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <DIO_vidSetPinVal+0x130>
    1ba4:	84 27       	eor	r24, r20
    1ba6:	8c 93       	st	X, r24
		}
	}
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <DIO_u8GetPinVal>:
uint8 DIO_u8GetPinVal(uint8 u8PinNum){
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <DIO_u8GetPinVal+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Get_stat=0;
    1bbe:	19 82       	std	Y+1, r1	; 0x01
	if(u8PinNum>=0 && u8PinNum<=31){
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	80 32       	cpi	r24, 0x20	; 32
    1bc4:	f8 f4       	brcc	.+62     	; 0x1c04 <DIO_u8GetPinVal+0x52>
		Get_stat=GET(*Arr_PIN[(u8PinNum/8)],(u8PinNum%8));
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	86 95       	lsr	r24
    1bca:	86 95       	lsr	r24
    1bcc:	86 95       	lsr	r24
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	ee 57       	subi	r30, 0x7E	; 126
    1bda:	fe 4f       	sbci	r31, 0xFE	; 254
    1bdc:	01 90       	ld	r0, Z+
    1bde:	f0 81       	ld	r31, Z
    1be0:	e0 2d       	mov	r30, r0
    1be2:	80 81       	ld	r24, Z
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	87 70       	andi	r24, 0x07	; 7
    1bf0:	90 70       	andi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_u8GetPinVal+0x48>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_u8GetPinVal+0x44>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
	}
	return Get_stat;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <DIO_vidSetPinSDir>:


void DIO_vidSetPinSDir(uint8 *u8PinNum,uint8 u8DirVal,uint8 u8ArrNum){
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <DIO_vidSetPinSDir+0x6>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <DIO_vidSetPinSDir+0x8>
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9b 83       	std	Y+3, r25	; 0x03
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	6c 83       	std	Y+4, r22	; 0x04
    1c24:	4d 83       	std	Y+5, r20	; 0x05
	uint8 i=0;
    1c26:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<u8ArrNum;i++){
    1c28:	19 82       	std	Y+1, r1	; 0x01
    1c2a:	a3 c0       	rjmp	.+326    	; 0x1d72 <DIO_vidSetPinSDir+0x162>
		if(u8PinNum[i]>=0 && u8PinNum[i]<=31){
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	9b 81       	ldd	r25, Y+3	; 0x03
    1c36:	fc 01       	movw	r30, r24
    1c38:	e2 0f       	add	r30, r18
    1c3a:	f3 1f       	adc	r31, r19
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 32       	cpi	r24, 0x20	; 32
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <DIO_vidSetPinSDir+0x34>
    1c42:	94 c0       	rjmp	.+296    	; 0x1d6c <DIO_vidSetPinSDir+0x15c>
			if(u8DirVal == INPUT_PIN){
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	88 23       	and	r24, r24
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <DIO_vidSetPinSDir+0x3c>
    1c4a:	47 c0       	rjmp	.+142    	; 0x1cda <DIO_vidSetPinSDir+0xca>
				CLEAR(*Arr_Dir[(u8PinNum[i]/8)],(u8PinNum[i]%8));
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	fc 01       	movw	r30, r24
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
    1c5c:	80 81       	ld	r24, Z
    1c5e:	86 95       	lsr	r24
    1c60:	86 95       	lsr	r24
    1c62:	86 95       	lsr	r24
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	ee 58       	subi	r30, 0x8E	; 142
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	a0 81       	ld	r26, Z
    1c74:	b1 81       	ldd	r27, Z+1	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	fc 01       	movw	r30, r24
    1c82:	e2 0f       	add	r30, r18
    1c84:	f3 1f       	adc	r31, r19
    1c86:	80 81       	ld	r24, Z
    1c88:	86 95       	lsr	r24
    1c8a:	86 95       	lsr	r24
    1c8c:	86 95       	lsr	r24
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	fc 01       	movw	r30, r24
    1c98:	ee 58       	subi	r30, 0x8E	; 142
    1c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9c:	01 90       	ld	r0, Z+
    1c9e:	f0 81       	ld	r31, Z
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e2 0f       	add	r30, r18
    1cb4:	f3 1f       	adc	r31, r19
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9c 01       	movw	r18, r24
    1cbe:	27 70       	andi	r18, 0x07	; 7
    1cc0:	30 70       	andi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <DIO_vidSetPinSDir+0xbe>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <DIO_vidSetPinSDir+0xba>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	8c 93       	st	X, r24
    1cd8:	49 c0       	rjmp	.+146    	; 0x1d6c <DIO_vidSetPinSDir+0x15c>
			}else if(u8DirVal == OUTPUT_PIN) {
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <DIO_vidSetPinSDir+0xd2>
    1ce0:	45 c0       	rjmp	.+138    	; 0x1d6c <DIO_vidSetPinSDir+0x15c>
				SET(*Arr_Dir[(u8PinNum[i]/8)],(u8PinNum[i]%8));
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	fc 01       	movw	r30, r24
    1cee:	e2 0f       	add	r30, r18
    1cf0:	f3 1f       	adc	r31, r19
    1cf2:	80 81       	ld	r24, Z
    1cf4:	86 95       	lsr	r24
    1cf6:	86 95       	lsr	r24
    1cf8:	86 95       	lsr	r24
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	fc 01       	movw	r30, r24
    1d04:	ee 58       	subi	r30, 0x8E	; 142
    1d06:	fe 4f       	sbci	r31, 0xFE	; 254
    1d08:	a0 81       	ld	r26, Z
    1d0a:	b1 81       	ldd	r27, Z+1	; 0x01
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	9b 81       	ldd	r25, Y+3	; 0x03
    1d16:	fc 01       	movw	r30, r24
    1d18:	e2 0f       	add	r30, r18
    1d1a:	f3 1f       	adc	r31, r19
    1d1c:	80 81       	ld	r24, Z
    1d1e:	86 95       	lsr	r24
    1d20:	86 95       	lsr	r24
    1d22:	86 95       	lsr	r24
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	ee 58       	subi	r30, 0x8E	; 142
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	01 90       	ld	r0, Z+
    1d34:	f0 81       	ld	r31, Z
    1d36:	e0 2d       	mov	r30, r0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 01       	movw	r18, r24
    1d54:	27 70       	andi	r18, 0x07	; 7
    1d56:	30 70       	andi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_vidSetPinSDir+0x154>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_vidSetPinSDir+0x150>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
}


void DIO_vidSetPinSDir(uint8 *u8PinNum,uint8 u8DirVal,uint8 u8ArrNum){
	uint8 i=0;
	for(i=0;i<u8ArrNum;i++){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	8f 5f       	subi	r24, 0xFF	; 255
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	99 81       	ldd	r25, Y+1	; 0x01
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	98 17       	cp	r25, r24
    1d78:	08 f4       	brcc	.+2      	; 0x1d7c <DIO_vidSetPinSDir+0x16c>
    1d7a:	58 cf       	rjmp	.-336    	; 0x1c2c <DIO_vidSetPinSDir+0x1c>
			}else if(u8DirVal == OUTPUT_PIN) {
				SET(*Arr_Dir[(u8PinNum[i]/8)],(u8PinNum[i]%8));
			}
		}else{}
	}
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <DIO_vidSetPinSVal>:
void DIO_vidSetPinSVal(uint8 *u8PinNum,uint8 u8PVal,uint8 u8ArrNum){
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <DIO_vidSetPinSVal+0x6>
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <DIO_vidSetPinSVal+0x8>
    1d94:	0f 92       	push	r0
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	9b 83       	std	Y+3, r25	; 0x03
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	6c 83       	std	Y+4, r22	; 0x04
    1da0:	4d 83       	std	Y+5, r20	; 0x05
	uint8 i=0;
    1da2:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<u8ArrNum;i++){
    1da4:	19 82       	std	Y+1, r1	; 0x01
    1da6:	ed c0       	rjmp	.+474    	; 0x1f82 <DIO_vidSetPinSVal+0x1f6>
		if(u8PinNum[i]>=0 && u8PinNum[i]<=31){
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	fc 01       	movw	r30, r24
    1db4:	e2 0f       	add	r30, r18
    1db6:	f3 1f       	adc	r31, r19
    1db8:	80 81       	ld	r24, Z
    1dba:	80 32       	cpi	r24, 0x20	; 32
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <DIO_vidSetPinSVal+0x34>
    1dbe:	de c0       	rjmp	.+444    	; 0x1f7c <DIO_vidSetPinSVal+0x1f0>
			if(u8PVal == LOW){
    1dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <DIO_vidSetPinSVal+0x3c>
    1dc6:	47 c0       	rjmp	.+142    	; 0x1e56 <DIO_vidSetPinSVal+0xca>
				CLEAR(*Arr_PORT[(u8PinNum[i]/8)],(u8PinNum[i]%8));
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	80 81       	ld	r24, Z
    1dda:	86 95       	lsr	r24
    1ddc:	86 95       	lsr	r24
    1dde:	86 95       	lsr	r24
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	fc 01       	movw	r30, r24
    1dea:	e6 58       	subi	r30, 0x86	; 134
    1dec:	fe 4f       	sbci	r31, 0xFE	; 254
    1dee:	a0 81       	ld	r26, Z
    1df0:	b1 81       	ldd	r27, Z+1	; 0x01
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	e2 0f       	add	r30, r18
    1e00:	f3 1f       	adc	r31, r19
    1e02:	80 81       	ld	r24, Z
    1e04:	86 95       	lsr	r24
    1e06:	86 95       	lsr	r24
    1e08:	86 95       	lsr	r24
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	fc 01       	movw	r30, r24
    1e14:	e6 58       	subi	r30, 0x86	; 134
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	01 90       	ld	r0, Z+
    1e1a:	f0 81       	ld	r31, Z
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	e2 0f       	add	r30, r18
    1e30:	f3 1f       	adc	r31, r19
    1e32:	80 81       	ld	r24, Z
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9c 01       	movw	r18, r24
    1e3a:	27 70       	andi	r18, 0x07	; 7
    1e3c:	30 70       	andi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_vidSetPinSVal+0xbe>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <DIO_vidSetPinSVal+0xba>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
    1e54:	93 c0       	rjmp	.+294    	; 0x1f7c <DIO_vidSetPinSVal+0x1f0>
			}else if(u8PVal == HIGH) {
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <DIO_vidSetPinSVal+0xd2>
    1e5c:	46 c0       	rjmp	.+140    	; 0x1eea <DIO_vidSetPinSVal+0x15e>
				SET(*Arr_PORT[(u8PinNum[i]/8)],(u8PinNum[i]%8));
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	80 81       	ld	r24, Z
    1e70:	86 95       	lsr	r24
    1e72:	86 95       	lsr	r24
    1e74:	86 95       	lsr	r24
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e6 58       	subi	r30, 0x86	; 134
    1e82:	fe 4f       	sbci	r31, 0xFE	; 254
    1e84:	a0 81       	ld	r26, Z
    1e86:	b1 81       	ldd	r27, Z+1	; 0x01
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	9b 81       	ldd	r25, Y+3	; 0x03
    1e92:	fc 01       	movw	r30, r24
    1e94:	e2 0f       	add	r30, r18
    1e96:	f3 1f       	adc	r31, r19
    1e98:	80 81       	ld	r24, Z
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	86 95       	lsr	r24
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	e6 58       	subi	r30, 0x86	; 134
    1eac:	fe 4f       	sbci	r31, 0xFE	; 254
    1eae:	01 90       	ld	r0, Z+
    1eb0:	f0 81       	ld	r31, Z
    1eb2:	e0 2d       	mov	r30, r0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	e2 0f       	add	r30, r18
    1ec6:	f3 1f       	adc	r31, r19
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9c 01       	movw	r18, r24
    1ed0:	27 70       	andi	r18, 0x07	; 7
    1ed2:	30 70       	andi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_vidSetPinSVal+0x154>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <DIO_vidSetPinSVal+0x150>
    1ee4:	84 2b       	or	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	49 c0       	rjmp	.+146    	; 0x1f7c <DIO_vidSetPinSVal+0x1f0>
			}else if(u8PVal == TOGGLE_){
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <DIO_vidSetPinSVal+0x166>
    1ef0:	45 c0       	rjmp	.+138    	; 0x1f7c <DIO_vidSetPinSVal+0x1f0>
				TOGGLE(*Arr_PORT[(u8PinNum[i]/8)],(u8PinNum[i]%8));
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	fc 01       	movw	r30, r24
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
    1f02:	80 81       	ld	r24, Z
    1f04:	86 95       	lsr	r24
    1f06:	86 95       	lsr	r24
    1f08:	86 95       	lsr	r24
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	fc 01       	movw	r30, r24
    1f14:	e6 58       	subi	r30, 0x86	; 134
    1f16:	fe 4f       	sbci	r31, 0xFE	; 254
    1f18:	a0 81       	ld	r26, Z
    1f1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
    1f26:	fc 01       	movw	r30, r24
    1f28:	e2 0f       	add	r30, r18
    1f2a:	f3 1f       	adc	r31, r19
    1f2c:	80 81       	ld	r24, Z
    1f2e:	86 95       	lsr	r24
    1f30:	86 95       	lsr	r24
    1f32:	86 95       	lsr	r24
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e6 58       	subi	r30, 0x86	; 134
    1f40:	fe 4f       	sbci	r31, 0xFE	; 254
    1f42:	01 90       	ld	r0, Z+
    1f44:	f0 81       	ld	r31, Z
    1f46:	e0 2d       	mov	r30, r0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9c 01       	movw	r18, r24
    1f64:	27 70       	andi	r18, 0x07	; 7
    1f66:	30 70       	andi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <DIO_vidSetPinSVal+0x1e8>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <DIO_vidSetPinSVal+0x1e4>
    1f78:	84 27       	eor	r24, r20
    1f7a:	8c 93       	st	X, r24
		}else{}
	}
}
void DIO_vidSetPinSVal(uint8 *u8PinNum,uint8 u8PVal,uint8 u8ArrNum){
	uint8 i=0;
	for(i=0;i<u8ArrNum;i++){
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	99 81       	ldd	r25, Y+1	; 0x01
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	98 17       	cp	r25, r24
    1f88:	08 f4       	brcc	.+2      	; 0x1f8c <DIO_vidSetPinSVal+0x200>
    1f8a:	0e cf       	rjmp	.-484    	; 0x1da8 <DIO_vidSetPinSVal+0x1c>
			}else if(u8PVal == TOGGLE_){
				TOGGLE(*Arr_PORT[(u8PinNum[i]/8)],(u8PinNum[i]%8));
			}
		}else{}
	}
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <__vector_16>:
#define ISR(vector)  															\
void vector(void)	__attribute__((signal,used,externally_visible));		    \
void vector(void)

ISR(__vector_16)//the ADC  index in vector table
{
    1f9c:	1f 92       	push	r1
    1f9e:	0f 92       	push	r0
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	0f 92       	push	r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	2f 93       	push	r18
    1fa8:	3f 93       	push	r19
    1faa:	4f 93       	push	r20
    1fac:	5f 93       	push	r21
    1fae:	6f 93       	push	r22
    1fb0:	7f 93       	push	r23
    1fb2:	8f 93       	push	r24
    1fb4:	9f 93       	push	r25
    1fb6:	af 93       	push	r26
    1fb8:	bf 93       	push	r27
    1fba:	ef 93       	push	r30
    1fbc:	ff 93       	push	r31
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
	ISR_ADC_INT();
    1fc6:	e0 91 bb 01 	lds	r30, 0x01BB
    1fca:	f0 91 bc 01 	lds	r31, 0x01BC
    1fce:	09 95       	icall
}
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	ff 91       	pop	r31
    1fd6:	ef 91       	pop	r30
    1fd8:	bf 91       	pop	r27
    1fda:	af 91       	pop	r26
    1fdc:	9f 91       	pop	r25
    1fde:	8f 91       	pop	r24
    1fe0:	7f 91       	pop	r23
    1fe2:	6f 91       	pop	r22
    1fe4:	5f 91       	pop	r21
    1fe6:	4f 91       	pop	r20
    1fe8:	3f 91       	pop	r19
    1fea:	2f 91       	pop	r18
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	0f 90       	pop	r0
    1ff2:	1f 90       	pop	r1
    1ff4:	18 95       	reti

00001ff6 <ADC_vid_int>:

void ADC_vid_int(){
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
	CLEAR(ADMUX,REFS1);
	#elif ADC_VOLT_source == ADC_AVCC
	SET(ADMUX,REFS0);
	CLEAR(ADMUX,REFS1);
	#elif ADC_VOLT_source == ADC_INTERNAL
	SET(ADMUX,REFS0);
    1ffe:	a7 e2       	ldi	r26, 0x27	; 39
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e7 e2       	ldi	r30, 0x27	; 39
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 64       	ori	r24, 0x40	; 64
    200a:	8c 93       	st	X, r24
	SET(ADMUX,REFS1);
    200c:	a7 e2       	ldi	r26, 0x27	; 39
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e7 e2       	ldi	r30, 0x27	; 39
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	80 68       	ori	r24, 0x80	; 128
    2018:	8c 93       	st	X, r24
	#endif

	//determine the ADC ADJUSTMENT
	#if ADC_ADJUSTMENT == ADC_Right_ADJUSTMENT
		CLEAR(ADMUX,ADLAR);   // RIGHT the default
    201a:	a7 e2       	ldi	r26, 0x27	; 39
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e7 e2       	ldi	r30, 0x27	; 39
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	8f 7d       	andi	r24, 0xDF	; 223
    2026:	8c 93       	st	X, r24
	#elif ADC_ADJUSTMENT == ADC_Left_ADJUSTMENT
		SET(ADMUX,ADLAR);   // left
	#endif

	SET(ADCSRA,ADEN);  // Enable Pin
    2028:	a6 e2       	ldi	r26, 0x26	; 38
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 68       	ori	r24, 0x80	; 128
    2034:	8c 93       	st	X, r24

	ADCSRA |= ADC_PRESCALER; //Pre_scaler
    2036:	a6 e2       	ldi	r26, 0x26	; 38
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e6 e2       	ldi	r30, 0x26	; 38
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	86 60       	ori	r24, 0x06	; 6
    2042:	8c 93       	st	X, r24
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <ADC_u16ReadDigitalVal>:

uint16 ADC_u16ReadDigitalVal(ADC_CHANNEL ChannelCopy)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <ADC_u16ReadDigitalVal+0x6>
    2050:	0f 92       	push	r0
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	8b 83       	std	Y+3, r24	; 0x03
		uint16 DigitalVal=0;
    2058:	1a 82       	std	Y+2, r1	; 0x02
    205a:	19 82       	std	Y+1, r1	; 0x01
		ADMUX &= ADC_CLEAR_MASK;
    205c:	a7 e2       	ldi	r26, 0x27	; 39
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e7 e2       	ldi	r30, 0x27	; 39
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 7e       	andi	r24, 0xE0	; 224
    2068:	8c 93       	st	X, r24
		ADMUX |= ChannelCopy;
    206a:	a7 e2       	ldi	r26, 0x27	; 39
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e7 e2       	ldi	r30, 0x27	; 39
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	90 81       	ld	r25, Z
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	89 2b       	or	r24, r25
    2078:	8c 93       	st	X, r24
		SET(ADCSRA,ADSC);
    207a:	a6 e2       	ldi	r26, 0x26	; 38
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e6 e2       	ldi	r30, 0x26	; 38
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	80 64       	ori	r24, 0x40	; 64
    2086:	8c 93       	st	X, r24

		while((GET(ADCSRA,ADSC)));//to wait until the conversion end
    2088:	e6 e2       	ldi	r30, 0x26	; 38
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	82 95       	swap	r24
    2090:	86 95       	lsr	r24
    2092:	86 95       	lsr	r24
    2094:	83 70       	andi	r24, 0x03	; 3
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	88 23       	and	r24, r24
    20a0:	99 f7       	brne	.-26     	; 0x2088 <ADC_u16ReadDigitalVal+0x3e>

		#if ADC_ADJUSTMENT == ADC_Right_ADJUSTMENT
				DigitalVal = ADCL;
    20a2:	e4 e2       	ldi	r30, 0x24	; 36
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
				DigitalVal |= (ADCH << 8);
    20b0:	e5 e2       	ldi	r30, 0x25	; 37
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	98 2f       	mov	r25, r24
    20bc:	88 27       	eor	r24, r24
    20be:	9c 01       	movw	r18, r24
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	82 2b       	or	r24, r18
    20c6:	93 2b       	or	r25, r19
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
		#elif ADC_ADJUSTMENT == ADC_Left_ADJUSTMENT
				DigitalVal = 0x00;
				DigitalVal |= (ADCH << 2);
		#endif
		return DigitalVal;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <ADC_vid_Enable>:

void ADC_vid_Enable()
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	SET(ADCSRA,ADEN);
    20e4:	a6 e2       	ldi	r26, 0x26	; 38
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e6 e2       	ldi	r30, 0x26	; 38
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 68       	ori	r24, 0x80	; 128
    20f0:	8c 93       	st	X, r24
}
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <ADC_vid_Disable>:
void ADC_vid_Disable()
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
	CLEAR(ADCSRA,ADEN);
    2100:	a6 e2       	ldi	r26, 0x26	; 38
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e6 e2       	ldi	r30, 0x26	; 38
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8f 77       	andi	r24, 0x7F	; 127
    210c:	8c 93       	st	X, r24
}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <ADC_vid_InterruptEnable>:

void ADC_vid_InterruptEnable()
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	SET(SREG,GIE);
    211c:	af e5       	ldi	r26, 0x5F	; 95
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ef e5       	ldi	r30, 0x5F	; 95
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	8c 93       	st	X, r24
	SET(ADCSRA,ADIE);
    212a:	a6 e2       	ldi	r26, 0x26	; 38
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e6 e2       	ldi	r30, 0x26	; 38
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	88 60       	ori	r24, 0x08	; 8
    2136:	8c 93       	st	X, r24
}
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <ADC_vid_InterruptDisable>:
void ADC_vid_InterruptDisable()
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
	CLEAR(ADCSRA,ADIE);
    2146:	a6 e2       	ldi	r26, 0x26	; 38
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e6 e2       	ldi	r30, 0x26	; 38
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	87 7f       	andi	r24, 0xF7	; 247
    2152:	8c 93       	st	X, r24
}
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <ADC_vid_ClrFlag>:
void ADC_vid_ClrFlag()
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	SET(ADCSRA,ADIF);
    2162:	a6 e2       	ldi	r26, 0x26	; 38
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e6 e2       	ldi	r30, 0x26	; 38
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 61       	ori	r24, 0x10	; 16
    216e:	8c 93       	st	X, r24
}
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <ADC_F32_STEP_mvolt>:

float32 ADC_F32_STEP_mvolt()//digital value to volt
{float32 step;
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <ADC_F32_STEP_mvolt+0x6>
    217c:	00 d0       	rcall	.+0      	; 0x217e <ADC_F32_STEP_mvolt+0x8>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
		#if ADC_VOLT_source == ADC_AREF
			step=5000.0/1024.00;
		#elif ADC_VOLT_source == ADC_AVCC
			step=5000.0/1024.00;
		#elif ADC_VOLT_source == ADC_INTERNAL
			step=2560/1024.00;
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e2       	ldi	r26, 0x20	; 32
    2188:	b0 e4       	ldi	r27, 0x40	; 64
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	ab 83       	std	Y+3, r26	; 0x03
    2190:	bc 83       	std	Y+4, r27	; 0x04
		#endif

		return step;
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	ab 81       	ldd	r26, Y+3	; 0x03
    2198:	bc 81       	ldd	r27, Y+4	; 0x04
}
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <EXT_ADC_vid_int>:

#include "../../Serv/std.h"
#include "../../MCAL/ADC/adc_init.h"
#include "tempsensor.h"
void EXT_ADC_vid_int()
{	 ADC_vid_int();
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <ADC_vid_int>
	 ADC_vid_Enable();
    21b8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <ADC_vid_Enable>
}
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <EXT_ADC_u16ReadDigitalVal>:
uint16 EXT_ADC_u16ReadDigitalVal(CHANNEL ChannelCopy)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
	return ADC_u16ReadDigitalVal(ChannelCopy);
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	0e 94 25 10 	call	0x204a	; 0x204a <ADC_u16ReadDigitalVal>
}
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <SE7_seg_vid_int>:
//in different ports
extern uint8 SE7_seg_port[(seven_7_seg_Num*7)];
uint8 u8se7_seg_NUMs_x[11] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x00};//the 7_segment numbers in hex shape
// 8 pins
//i the number of 7_segment
void SE7_seg_vid_int(uint8 i){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <SE7_seg_vid_int+0x6>
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	8a 83       	std	Y+2, r24	; 0x02
		uint8 j;//counter to pins
		if (i<=seven_7_seg_Num)
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	08 f0       	brcs	.+2      	; 0x21f0 <SE7_seg_vid_int+0x14>
    21ee:	3e c0       	rjmp	.+124    	; 0x226c <SE7_seg_vid_int+0x90>
		{i--;
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	81 50       	subi	r24, 0x01	; 1
    21f4:	8a 83       	std	Y+2, r24	; 0x02
			for (j=(i*7);j<=(7+i*7);j++)
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	c9 01       	movw	r24, r18
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	82 1b       	sub	r24, r18
    220c:	93 0b       	sbc	r25, r19
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	17 c0       	rjmp	.+46     	; 0x2240 <SE7_seg_vid_int+0x64>
			{
				DIO_vidSetPinDir(SE7_seg_port[j],OUTPUT_PIN);
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	fc 01       	movw	r30, r24
    221a:	e6 57       	subi	r30, 0x76	; 118
    221c:	fe 4f       	sbci	r31, 0xFE	; 254
    221e:	80 81       	ld	r24, Z
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
				DIO_vidSetPinVal(SE7_seg_port[j],LOW);
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	fc 01       	movw	r30, r24
    222e:	e6 57       	subi	r30, 0x76	; 118
    2230:	fe 4f       	sbci	r31, 0xFE	; 254
    2232:	80 81       	ld	r24, Z
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
//i the number of 7_segment
void SE7_seg_vid_int(uint8 i){
		uint8 j;//counter to pins
		if (i<=seven_7_seg_Num)
		{i--;
			for (j=(i*7);j<=(7+i*7);j++)
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	48 2f       	mov	r20, r24
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 01       	movw	r18, r24
    224e:	2f 5f       	subi	r18, 0xFF	; 255
    2250:	3f 4f       	sbci	r19, 0xFF	; 255
    2252:	c9 01       	movw	r24, r18
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	82 1b       	sub	r24, r18
    2262:	93 0b       	sbc	r25, r19
    2264:	84 17       	cp	r24, r20
    2266:	95 07       	cpc	r25, r21
    2268:	a4 f6       	brge	.-88     	; 0x2212 <SE7_seg_vid_int+0x36>
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <SE7_seg_vid_int+0x96>
			{
				DIO_vidSetPinDir(SE7_seg_port[j],OUTPUT_PIN);
				DIO_vidSetPinVal(SE7_seg_port[j],LOW);
			}
			}else{error=3;}
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	80 93 bd 01 	sts	0x01BD, r24

	}//to determine the direction and initial value of the port or pins of  7_seg
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <SE7_seg_vid_write>:
void SE7_seg_vid_write(uint8 u8seg_NUM,uint8 i){
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <SE7_seg_vid_write+0x6>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <SE7_seg_vid_write+0x8>
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	8b 83       	std	Y+3, r24	; 0x03
    228a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 j,k;//j counter for pins of port
	//k to make shifting
	if (i<=seven_7_seg_Num){
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	e0 f5       	brcc	.+120    	; 0x230a <SE7_seg_vid_write+0x8e>
		i--;
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	81 50       	subi	r24, 0x01	; 1
    2296:	8c 83       	std	Y+4, r24	; 0x04
		for (j=(i*7),k=0;j<=(7+i*7),k<=6;j++,k++)
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	c9 01       	movw	r24, r18
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	82 1b       	sub	r24, r18
    22ae:	93 0b       	sbc	r25, r19
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	19 82       	std	Y+1, r1	; 0x01
    22b4:	26 c0       	rjmp	.+76     	; 0x2302 <SE7_seg_vid_write+0x86>
		{
			DIO_vidSetPinVal(SE7_seg_port[j],GET(u8se7_seg_NUMs_x[u8seg_NUM],k));
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	fc 01       	movw	r30, r24
    22be:	e6 57       	subi	r30, 0x76	; 118
    22c0:	fe 4f       	sbci	r31, 0xFE	; 254
    22c2:	40 81       	ld	r20, Z
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	fc 01       	movw	r30, r24
    22cc:	e8 56       	subi	r30, 0x68	; 104
    22ce:	fe 4f       	sbci	r31, 0xFE	; 254
    22d0:	80 81       	ld	r24, Z
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	b9 01       	movw	r22, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <SE7_seg_vid_write+0x68>
    22e0:	75 95       	asr	r23
    22e2:	67 95       	ror	r22
    22e4:	8a 95       	dec	r24
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <SE7_seg_vid_write+0x64>
    22e8:	cb 01       	movw	r24, r22
    22ea:	98 2f       	mov	r25, r24
    22ec:	91 70       	andi	r25, 0x01	; 1
    22ee:	84 2f       	mov	r24, r20
    22f0:	69 2f       	mov	r22, r25
    22f2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
void SE7_seg_vid_write(uint8 u8seg_NUM,uint8 i){
	uint8 j,k;//j counter for pins of port
	//k to make shifting
	if (i<=seven_7_seg_Num){
		i--;
		for (j=(i*7),k=0;j<=(7+i*7),k<=6;j++,k++)
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	8a 83       	std	Y+2, r24	; 0x02
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	87 30       	cpi	r24, 0x07	; 7
    2306:	b8 f2       	brcs	.-82     	; 0x22b6 <SE7_seg_vid_write+0x3a>
    2308:	03 c0       	rjmp	.+6      	; 0x2310 <SE7_seg_vid_write+0x94>
		{
			DIO_vidSetPinVal(SE7_seg_port[j],GET(u8se7_seg_NUMs_x[u8seg_NUM],k));
		}}else{error=3;}
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	80 93 bd 01 	sts	0x01BD, r24

	//to write the number on  7_seg
	}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <SW_vidInt>:
#include "../../MCAL/DIO/dio_int.h"
#include "sw_conf.h"
#include "sw_int.h"


void SW_vidInt(){
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDir(SW1_Pin,INPUT_PIN);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(SW1_Pin,HIGH);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
	DIO_vidSetPinDir(SW2_Pin,INPUT_PIN);
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(SW2_Pin,HIGH);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	61 e0       	ldi	r22, 0x01	; 1
    2342:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
	DIO_vidSetPinDir(SW3_Pin,INPUT_PIN);
    2346:	83 e0       	ldi	r24, 0x03	; 3
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(SW3_Pin,HIGH);
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	61 e0       	ldi	r22, 0x01	; 1
    2352:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
}
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <SW1_u8Read>:
uint8 SW1_u8Read( ){
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8GetPinVal(SW1_Pin);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <DIO_u8GetPinVal>
}
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <SW2_u8Read>:
uint8 SW2_u8Read( ){
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8GetPinVal(SW2_Pin);
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <DIO_u8GetPinVal>
}
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <SW3_u8Read>:

uint8 SW3_u8Read( ){
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8GetPinVal(SW3_Pin);
    238c:	83 e0       	ldi	r24, 0x03	; 3
    238e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <DIO_u8GetPinVal>
}
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <LEDS_vidInt>:
#include "led_conf.h"
#include "led_int.h"



void LEDS_vidInt(){
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPinDir(LED1_PIN,OUTPUT_PIN);
    23a0:	83 e1       	ldi	r24, 0x13	; 19
    23a2:	61 e0       	ldi	r22, 0x01	; 1
    23a4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(LED1_PIN,LOW);
    23a8:	83 e1       	ldi	r24, 0x13	; 19
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
	DIO_vidSetPinDir(LED2_PIN,OUTPUT_PIN);
    23b0:	84 e1       	ldi	r24, 0x14	; 20
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(LED2_PIN,LOW);
    23b8:	84 e1       	ldi	r24, 0x14	; 20
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
	DIO_vidSetPinDir(LED3_PIN,OUTPUT_PIN);
    23c0:	85 e1       	ldi	r24, 0x15	; 21
    23c2:	61 e0       	ldi	r22, 0x01	; 1
    23c4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(LED3_PIN,LOW);
    23c8:	85 e1       	ldi	r24, 0x15	; 21
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
	DIO_vidSetPinDir(LED4_PIN,OUTPUT_PIN);
    23d0:	84 e0       	ldi	r24, 0x04	; 4
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(LED4_PIN,LOW);
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
}
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <LED1_vidSet>:

void LED1_vidSet(uint8 u8Stat){
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(LED1_PIN,u8Stat);
    23f2:	83 e1       	ldi	r24, 0x13	; 19
    23f4:	69 81       	ldd	r22, Y+1	; 0x01
    23f6:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
}
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <LED2_vidSet>:

void LED2_vidSet(uint8 u8Stat){
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	0f 92       	push	r0
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(LED2_PIN,u8Stat);
    240e:	84 e1       	ldi	r24, 0x14	; 20
    2410:	69 81       	ldd	r22, Y+1	; 0x01
    2412:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
}
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <LED3_vidSet>:

void LED3_vidSet(uint8 u8Stat){
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	0f 92       	push	r0
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(LED3_PIN,u8Stat);
    242a:	85 e1       	ldi	r24, 0x15	; 21
    242c:	69 81       	ldd	r22, Y+1	; 0x01
    242e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
}
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <LED4_vidSet>:

void LED4_vidSet(uint8 u8Stat){
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	0f 92       	push	r0
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(LED4_PIN,u8Stat);
    2446:	84 e0       	ldi	r24, 0x04	; 4
    2448:	69 81       	ldd	r22, Y+1	; 0x01
    244a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
}
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <TIMER_vid_int>:
#include "../../Serv/bit_math.h"
#include "../../MCAL/TIMER/TIMER0_init.h"
#include "TIMER_int.h"

void TIMER_vid_int(void)//interface & initialization
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
	TIMER0_vid_int();
    245e:	0e 94 71 07 	call	0xee2	; 0xee2 <TIMER0_vid_int>
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <TIMER_vid_Start>:

void TIMER_vid_Start(void)//start timer
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_vid_Start();
    2470:	0e 94 8f 07 	call	0xf1e	; 0xf1e <TIMER0_vid_Start>
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <TIMER_vid_Stop>:
void TIMER_vid_Stop(void)//Stop timer
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
	TIMER0_vid_Stop();
    2482:	0e 94 a4 07 	call	0xf48	; 0xf48 <TIMER0_vid_Stop>
}
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <TIMER_vid_Reset>:
void TIMER_vid_Reset(void)//Reset timer
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
	TIMER0_vid_Reset();
    2494:	0e 94 b2 07 	call	0xf64	; 0xf64 <TIMER0_vid_Reset>
}
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <TIMER_vid_Write_COMP_OCR0>:

void TIMER_vid_Write_COMP_OCR0(uint8 Copy_Start_Value)//comparing value to write the ocr
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	0f 92       	push	r0
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_vid_Write_COMP_OCR0(Copy_Start_Value);
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	0e 94 ca 07 	call	0xf94	; 0xf94 <TIMER0_vid_Write_COMP_OCR0>
}
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <TIMER_vid_COMP_Interrupt_Enable>:

//INT enable
void TIMER_vid_COMP_Interrupt_Enable(void)//comparing INT enable
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	TIMER0_vid_COMP_Interrupt_Enable();
    24c0:	0e 94 fb 07 	call	0xff6	; 0xff6 <TIMER0_vid_COMP_Interrupt_Enable>
}
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <timer_isr_fun>:

void timer_isr_fun(void (*fun)(void))
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <timer_isr_fun+0x6>
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CTC_INT=fun;
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	90 93 b4 01 	sts	0x01B4, r25
    24e0:	80 93 b3 01 	sts	0x01B3, r24
}
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <EXTR_vidInit>:
#include "../../MCAL/DIO/dio_int.h"
#include "../../MCAL/EXT/ext_init.h"
#include "extrint_conf.h"
#include "extrint_init.h"

void EXTR_vidInit(uint8 u8INTCopy,uint8 u8StCopy){
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <EXTR_vidInit+0x6>
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vidSetPinDir(INT_PIN,INPUT_PIN);
    24fc:	8a e1       	ldi	r24, 0x1A	; 26
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	0e 94 c4 0c 	call	0x1988	; 0x1988 <DIO_vidSetPinDir>
	DIO_vidSetPinVal(INT_PIN,HIGH);
    2504:	8a e1       	ldi	r24, 0x1A	; 26
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <DIO_vidSetPinVal>
	EXT_vidInit(u8INTCopy,u8StCopy);
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	6a 81       	ldd	r22, Y+2	; 0x02
    2510:	0e 94 2e 0b 	call	0x165c	; 0x165c <EXT_vidInit>
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <EXTR_vidISR0FUN>:

void EXTR_vidISR0FUN(void (*FUN_ISR)(void)){
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <EXTR_vidISR0FUN+0x6>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
	ISR_FUN_INT0=FUN_ISR;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	90 93 ba 01 	sts	0x01BA, r25
    2534:	80 93 b9 01 	sts	0x01B9, r24
}
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <EXTR_vidISR1FUN>:
void EXTR_vidISR1FUN(void (*FUN_ISR)(void)){
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	00 d0       	rcall	.+0      	; 0x2548 <EXTR_vidISR1FUN+0x6>
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	9a 83       	std	Y+2, r25	; 0x02
    254e:	89 83       	std	Y+1, r24	; 0x01
	ISR_FUN_INT1=FUN_ISR;
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	90 93 b8 01 	sts	0x01B8, r25
    2558:	80 93 b7 01 	sts	0x01B7, r24
}
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <EXTR_vidISR2FUN>:
void EXTR_vidISR2FUN(void (*FUN_ISR)(void)){
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	00 d0       	rcall	.+0      	; 0x256c <EXTR_vidISR2FUN+0x6>
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
	ISR_FUN_INT2=FUN_ISR;
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	90 93 b6 01 	sts	0x01B6, r25
    257c:	80 93 b5 01 	sts	0x01B5, r24
}
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <EEPROM_voidInit>:

#include "eeprom.h"


void EEPROM_voidInit (void)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
	TWI_voidMasterInit();
    2592:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_voidMasterInit>
}
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <EEPROM_SendData>:
//write data on EEPROM by TWI
void EEPROM_SendData(uint16 Copy_u16Adress,uint8 Copy_u8Data)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <EEPROM_SendData+0x6>
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	6b 83       	std	Y+3, r22	; 0x03
	EEPROM_SendDataByte(Copy_u16Adress,Copy_u8Data);
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	6b 81       	ldd	r22, Y+3	; 0x03
    25b4:	0e 94 b1 09 	call	0x1362	; 0x1362 <EEPROM_SendDataByte>
}
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <EEPROM_ReadData>:

//Read data from EEPROM by TWI
void EEPROM_ReadData(uint16 Copy_u16Adress,uint8 *Copy_pu8Data)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <EEPROM_ReadData+0x6>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <EEPROM_ReadData+0x8>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	7c 83       	std	Y+4, r23	; 0x04
    25d6:	6b 83       	std	Y+3, r22	; 0x03
	EEPROM_ReadDataByte(Copy_u16Adress,Copy_pu8Data);
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	2b 81       	ldd	r18, Y+3	; 0x03
    25de:	3c 81       	ldd	r19, Y+4	; 0x04
    25e0:	b9 01       	movw	r22, r18
    25e2:	0e 94 5f 0a 	call	0x14be	; 0x14be <EEPROM_ReadDataByte>
}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <main>:
uint16 Req_Temp_achieved_counter=0;

uint8 seting_mode=0 ,on_off_count=0;

int main(void)
{
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	e2 97       	sbiw	r28, 0x32	; 50
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
	/*******initialization********/
	EXT_ADC_vid_int();//ADC_interface
    260c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <EXT_ADC_vid_int>
	TIMER_vid_int();
    2610:	0e 94 2b 12 	call	0x2456	; 0x2456 <TIMER_vid_int>
	EEPROM_voidInit();
    2614:	0e 94 c5 12 	call	0x258a	; 0x258a <EEPROM_voidInit>
	LEDS_vidInt();
    2618:	0e 94 cc 11 	call	0x2398	; 0x2398 <LEDS_vidInt>
	SW_vidInt();
    261c:	0e 94 8f 11 	call	0x231e	; 0x231e <SW_vidInt>
	uint8 S7_seg_count=2,int_count=0;
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	89 87       	std	Y+9, r24	; 0x09
    2624:	18 86       	std	Y+8, r1	; 0x08
	for (int_count=1;int_count<=S7_seg_count;int_count++)
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	88 87       	std	Y+8, r24	; 0x08
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <main+0x44>
	{SE7_seg_vid_int(int_count);//seven segments_interface
    262c:	88 85       	ldd	r24, Y+8	; 0x08
    262e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <SE7_seg_vid_int>
	TIMER_vid_int();
	EEPROM_voidInit();
	LEDS_vidInt();
	SW_vidInt();
	uint8 S7_seg_count=2,int_count=0;
	for (int_count=1;int_count<=S7_seg_count;int_count++)
    2632:	88 85       	ldd	r24, Y+8	; 0x08
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	88 87       	std	Y+8, r24	; 0x08
    2638:	98 85       	ldd	r25, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	89 17       	cp	r24, r25
    263e:	b0 f7       	brcc	.-20     	; 0x262c <main+0x38>
	{SE7_seg_vid_int(int_count);//seven segments_interface
	}

	/******The code******/
	//timer prepare
	TIMER_vid_COMP_Interrupt_Enable();
    2640:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <TIMER_vid_COMP_Interrupt_Enable>
	TIMER_vid_Write_COMP_OCR0(249);//the timer cycle take 4ms
    2644:	89 ef       	ldi	r24, 0xF9	; 249
    2646:	0e 94 4f 12 	call	0x249e	; 0x249e <TIMER_vid_Write_COMP_OCR0>
	timer_isr_fun(timer_isr);
    264a:	8d ea       	ldi	r24, 0xAD	; 173
    264c:	96 e1       	ldi	r25, 0x16	; 22
    264e:	0e 94 65 12 	call	0x24ca	; 0x24ca <timer_isr_fun>

	//variables for tasks
	uint8 Tens_count=6,ones_count=0;
    2652:	86 e0       	ldi	r24, 0x06	; 6
    2654:	8f 83       	std	Y+7, r24	; 0x07
    2656:	1e 82       	std	Y+6, r1	; 0x06


	// water_temp it is the temperature from sensor
	sint32 water_temp_arr[10];//the ten readings
	sint32 water_temp=0;//the average read
    2658:	1a 82       	std	Y+2, r1	; 0x02
    265a:	1b 82       	std	Y+3, r1	; 0x03
    265c:	1c 82       	std	Y+4, r1	; 0x04
    265e:	1d 82       	std	Y+5, r1	; 0x05

	//The initial set temperature is 60 degrees.
	uint8 temp=60;// temp it is the required temperature
    2660:	8c e3       	ldi	r24, 0x3C	; 60
    2662:	8a ab       	std	Y+50, r24	; 0x32
	EEPROM_SendData(0X00,temp);
    2664:	2a a9       	ldd	r18, Y+50	; 0x32
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	62 2f       	mov	r22, r18
    266c:	0e 94 ce 12 	call	0x259c	; 0x259c <EEPROM_SendData>
	SE7_seg_vid_write(Tens_count,1);
    2670:	8f 81       	ldd	r24, Y+7	; 0x07
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
	SE7_seg_vid_write(ones_count,2);
    2678:	8e 81       	ldd	r24, Y+6	; 0x06
    267a:	62 e0       	ldi	r22, 0x02	; 2
    267c:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>

	while (1)
	{
		//the electric water heater is off
		if (on_off_count == 0)
    2680:	80 91 b0 01 	lds	r24, 0x01B0
    2684:	88 23       	and	r24, r24
    2686:	09 f0       	breq	.+2      	; 0x268a <main+0x96>
    2688:	3b c1       	rjmp	.+630    	; 0x2900 <main+0x30c>
		{LED4_vidSet(LED_LOW);	//system off
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	0e 94 1d 12 	call	0x243a	; 0x243a <LED4_vidSet>
		water_temp=(float32)((float32)((float32)EXT_ADC_u16ReadDigitalVal(CHANNEL0)*2.5)/10);//first reading degree
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <EXT_ADC_u16ReadDigitalVal>
    2696:	cc 01       	movw	r24, r24
    2698:	a0 e0       	ldi	r26, 0x00	; 0
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	50 e4       	ldi	r21, 0x40	; 64
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8a 83       	std	Y+2, r24	; 0x02
    26de:	9b 83       	std	Y+3, r25	; 0x03
    26e0:	ac 83       	std	Y+4, r26	; 0x04
    26e2:	bd 83       	std	Y+5, r27	; 0x05
		LED1_vidSet(LED_LOW);
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LED1_vidSet>
		LED2_vidSet(LED_LOW);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	0e 94 01 12 	call	0x2402	; 0x2402 <LED2_vidSet>
		LED3_vidSet(LED_LOW);
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	0e 94 0f 12 	call	0x241e	; 0x241e <LED3_vidSet>
		heating_indicator=0;
    26f6:	10 92 ab 01 	sts	0x01AB, r1
		colling_indicator=0;
    26fa:	10 92 aa 01 	sts	0x01AA, r1
		Req_Temp_achieved_indicator=0;
    26fe:	10 92 ac 01 	sts	0x01AC, r1
		/******setting mode******/
		//button 1 the increasing button
		if (SW1_u8Read()==0 )
    2702:	0e 94 ae 11 	call	0x235c	; 0x235c <SW1_u8Read>
    2706:	88 23       	and	r24, r24
    2708:	09 f0       	breq	.+2      	; 0x270c <main+0x118>
    270a:	73 c0       	rjmp	.+230    	; 0x27f2 <main+0x1fe>
		{if (seting_mode==0)//setting mode off
    270c:	80 91 af 01 	lds	r24, 0x01AF
    2710:	88 23       	and	r24, r24
    2712:	51 f4       	brne	.+20     	; 0x2728 <main+0x134>
		{seting_mode=1;//setting mode on //the first press
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	80 93 af 01 	sts	0x01AF, r24
		TIMER_vid_Start();
    271a:	0e 94 34 12 	call	0x2468	; 0x2468 <TIMER_vid_Start>
		while(SW1_u8Read()==0);//waiting until release the button
    271e:	0e 94 ae 11 	call	0x235c	; 0x235c <SW1_u8Read>
    2722:	88 23       	and	r24, r24
    2724:	e1 f3       	breq	.-8      	; 0x271e <main+0x12a>
    2726:	53 c0       	rjmp	.+166    	; 0x27ce <main+0x1da>
		}else	//setting mode on //not the first press
		{	//put the temp you want by increasing
			//increasing button by 5 degrees

			if (ones_count == 0)
    2728:	8e 81       	ldd	r24, Y+6	; 0x06
    272a:	88 23       	and	r24, r24
    272c:	31 f5       	brne	.+76     	; 0x277a <main+0x186>
			{ones_count=5;
    272e:	85 e0       	ldi	r24, 0x05	; 5
    2730:	8e 83       	std	Y+6, r24	; 0x06
			temp=(Tens_count*10)+ones_count;
    2732:	8f 81       	ldd	r24, Y+7	; 0x07
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9c 01       	movw	r18, r24
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	c9 01       	movw	r24, r18
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	82 0f       	add	r24, r18
    274a:	93 1f       	adc	r25, r19
    274c:	98 2f       	mov	r25, r24
    274e:	8e 81       	ldd	r24, Y+6	; 0x06
    2750:	89 0f       	add	r24, r25
    2752:	8a ab       	std	Y+50, r24	; 0x32
			EEPROM_SendData(0X00,temp);//save in EEPROM
    2754:	2a a9       	ldd	r18, Y+50	; 0x32
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	62 2f       	mov	r22, r18
    275c:	0e 94 ce 12 	call	0x259c	; 0x259c <EEPROM_SendData>
			while(SW1_u8Read()==0);
    2760:	0e 94 ae 11 	call	0x235c	; 0x235c <SW1_u8Read>
    2764:	88 23       	and	r24, r24
    2766:	e1 f3       	breq	.-8      	; 0x2760 <main+0x16c>
			EEPROM_ReadData(0x00,&temp);
    2768:	9e 01       	movw	r18, r28
    276a:	2e 5c       	subi	r18, 0xCE	; 206
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	b9 01       	movw	r22, r18
    2774:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <EEPROM_ReadData>
    2778:	2a c0       	rjmp	.+84     	; 0x27ce <main+0x1da>
			}else if (ones_count == 5 && Tens_count !=7)
    277a:	8e 81       	ldd	r24, Y+6	; 0x06
    277c:	85 30       	cpi	r24, 0x05	; 5
    277e:	39 f5       	brne	.+78     	; 0x27ce <main+0x1da>
    2780:	8f 81       	ldd	r24, Y+7	; 0x07
    2782:	87 30       	cpi	r24, 0x07	; 7
    2784:	21 f1       	breq	.+72     	; 0x27ce <main+0x1da>
			{ones_count=0;
    2786:	1e 82       	std	Y+6, r1	; 0x06
			Tens_count++;
    2788:	8f 81       	ldd	r24, Y+7	; 0x07
    278a:	8f 5f       	subi	r24, 0xFF	; 255
    278c:	8f 83       	std	Y+7, r24	; 0x07
			temp=Tens_count*10;
    278e:	8f 81       	ldd	r24, Y+7	; 0x07
    2790:	88 2f       	mov	r24, r24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9c 01       	movw	r18, r24
    2796:	22 0f       	add	r18, r18
    2798:	33 1f       	adc	r19, r19
    279a:	c9 01       	movw	r24, r18
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	82 0f       	add	r24, r18
    27a6:	93 1f       	adc	r25, r19
    27a8:	8a ab       	std	Y+50, r24	; 0x32
			EEPROM_SendData(0X00,temp);
    27aa:	2a a9       	ldd	r18, Y+50	; 0x32
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	62 2f       	mov	r22, r18
    27b2:	0e 94 ce 12 	call	0x259c	; 0x259c <EEPROM_SendData>
			while(SW1_u8Read()==0);
    27b6:	0e 94 ae 11 	call	0x235c	; 0x235c <SW1_u8Read>
    27ba:	88 23       	and	r24, r24
    27bc:	e1 f3       	breq	.-8      	; 0x27b6 <main+0x1c2>
			EEPROM_ReadData(0x00,&temp);
    27be:	9e 01       	movw	r18, r28
    27c0:	2e 5c       	subi	r18, 0xCE	; 206
    27c2:	3f 4f       	sbci	r19, 0xFF	; 255
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	b9 01       	movw	r22, r18
    27ca:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <EEPROM_ReadData>
			}
		}
		//write on seven segment
		Tens_count=temp/10;
    27ce:	8a a9       	ldd	r24, Y+50	; 0x32
    27d0:	9a e0       	ldi	r25, 0x0A	; 10
    27d2:	69 2f       	mov	r22, r25
    27d4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    27d8:	8f 83       	std	Y+7, r24	; 0x07
		ones_count=temp%10;
    27da:	8a a9       	ldd	r24, Y+50	; 0x32
    27dc:	9a e0       	ldi	r25, 0x0A	; 10
    27de:	69 2f       	mov	r22, r25
    27e0:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    27e4:	89 2f       	mov	r24, r25
    27e6:	8e 83       	std	Y+6, r24	; 0x06
		seting_mode_counter=0;//count 5 sec after last press
    27e8:	10 92 a7 01 	sts	0x01A7, r1
    27ec:	10 92 a6 01 	sts	0x01A6, r1
    27f0:	87 c0       	rjmp	.+270    	; 0x2900 <main+0x30c>
		}

		//button 2 the decreasing button
		else if (SW2_u8Read()==0 )
    27f2:	0e 94 b8 11 	call	0x2370	; 0x2370 <SW2_u8Read>
    27f6:	88 23       	and	r24, r24
    27f8:	09 f0       	breq	.+2      	; 0x27fc <main+0x208>
    27fa:	82 c0       	rjmp	.+260    	; 0x2900 <main+0x30c>
		{if (seting_mode==0)//setting mode off
    27fc:	80 91 af 01 	lds	r24, 0x01AF
    2800:	88 23       	and	r24, r24
    2802:	51 f4       	brne	.+20     	; 0x2818 <main+0x224>
		{seting_mode=1;//setting mode on //the first press
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 af 01 	sts	0x01AF, r24
		TIMER_vid_Start();
    280a:	0e 94 34 12 	call	0x2468	; 0x2468 <TIMER_vid_Start>
		while(SW2_u8Read()==0);//waiting until release the button
    280e:	0e 94 b8 11 	call	0x2370	; 0x2370 <SW2_u8Read>
    2812:	88 23       	and	r24, r24
    2814:	e1 f3       	breq	.-8      	; 0x280e <main+0x21a>
    2816:	56 c0       	rjmp	.+172    	; 0x28c4 <main+0x2d0>
		}
		else//setting mode on //not the first press
		{	//put the temp you want by decreasing
			//decreasing button by 5 degrees

			if (ones_count == 5 && Tens_count !=3)
    2818:	8e 81       	ldd	r24, Y+6	; 0x06
    281a:	85 30       	cpi	r24, 0x05	; 5
    281c:	29 f5       	brne	.+74     	; 0x2868 <main+0x274>
    281e:	8f 81       	ldd	r24, Y+7	; 0x07
    2820:	83 30       	cpi	r24, 0x03	; 3
    2822:	11 f1       	breq	.+68     	; 0x2868 <main+0x274>
			{ones_count=0;
    2824:	1e 82       	std	Y+6, r1	; 0x06
			temp=(Tens_count*10);
    2826:	8f 81       	ldd	r24, Y+7	; 0x07
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 01       	movw	r18, r24
    282e:	22 0f       	add	r18, r18
    2830:	33 1f       	adc	r19, r19
    2832:	c9 01       	movw	r24, r18
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	82 0f       	add	r24, r18
    283e:	93 1f       	adc	r25, r19
    2840:	8a ab       	std	Y+50, r24	; 0x32
			EEPROM_SendData(0X00,temp);//save in EEPROM
    2842:	2a a9       	ldd	r18, Y+50	; 0x32
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	62 2f       	mov	r22, r18
    284a:	0e 94 ce 12 	call	0x259c	; 0x259c <EEPROM_SendData>
			while(SW2_u8Read()==0);
    284e:	0e 94 b8 11 	call	0x2370	; 0x2370 <SW2_u8Read>
    2852:	88 23       	and	r24, r24
    2854:	e1 f3       	breq	.-8      	; 0x284e <main+0x25a>
			EEPROM_ReadData(0x00,&temp);
    2856:	9e 01       	movw	r18, r28
    2858:	2e 5c       	subi	r18, 0xCE	; 206
    285a:	3f 4f       	sbci	r19, 0xFF	; 255
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	b9 01       	movw	r22, r18
    2862:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <EEPROM_ReadData>
    2866:	2e c0       	rjmp	.+92     	; 0x28c4 <main+0x2d0>
			}else if (ones_count == 0 && Tens_count !=3)
    2868:	8e 81       	ldd	r24, Y+6	; 0x06
    286a:	88 23       	and	r24, r24
    286c:	59 f5       	brne	.+86     	; 0x28c4 <main+0x2d0>
    286e:	8f 81       	ldd	r24, Y+7	; 0x07
    2870:	83 30       	cpi	r24, 0x03	; 3
    2872:	41 f1       	breq	.+80     	; 0x28c4 <main+0x2d0>
			{
				ones_count=5;
    2874:	85 e0       	ldi	r24, 0x05	; 5
    2876:	8e 83       	std	Y+6, r24	; 0x06
				Tens_count--;
    2878:	8f 81       	ldd	r24, Y+7	; 0x07
    287a:	81 50       	subi	r24, 0x01	; 1
    287c:	8f 83       	std	Y+7, r24	; 0x07
				temp=Tens_count*10+ones_count;
    287e:	8f 81       	ldd	r24, Y+7	; 0x07
    2880:	88 2f       	mov	r24, r24
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9c 01       	movw	r18, r24
    2886:	22 0f       	add	r18, r18
    2888:	33 1f       	adc	r19, r19
    288a:	c9 01       	movw	r24, r18
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	82 0f       	add	r24, r18
    2896:	93 1f       	adc	r25, r19
    2898:	98 2f       	mov	r25, r24
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	89 0f       	add	r24, r25
    289e:	8a ab       	std	Y+50, r24	; 0x32
				EEPROM_SendData(0X00,temp);
    28a0:	2a a9       	ldd	r18, Y+50	; 0x32
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	62 2f       	mov	r22, r18
    28a8:	0e 94 ce 12 	call	0x259c	; 0x259c <EEPROM_SendData>
				while(SW2_u8Read()==0);
    28ac:	0e 94 b8 11 	call	0x2370	; 0x2370 <SW2_u8Read>
    28b0:	88 23       	and	r24, r24
    28b2:	e1 f3       	breq	.-8      	; 0x28ac <main+0x2b8>
				EEPROM_ReadData(0x00,&temp);
    28b4:	9e 01       	movw	r18, r28
    28b6:	2e 5c       	subi	r18, 0xCE	; 206
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	b9 01       	movw	r22, r18
    28c0:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <EEPROM_ReadData>
			}
		}
		//write on seven segment
		Tens_count=temp/10;
    28c4:	8a a9       	ldd	r24, Y+50	; 0x32
    28c6:	9a e0       	ldi	r25, 0x0A	; 10
    28c8:	69 2f       	mov	r22, r25
    28ca:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    28ce:	8f 83       	std	Y+7, r24	; 0x07
		ones_count=temp-Tens_count*10;
    28d0:	8f 81       	ldd	r24, Y+7	; 0x07
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9c 01       	movw	r18, r24
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	c9 01       	movw	r24, r18
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	90 95       	com	r25
    28ec:	81 95       	neg	r24
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	98 2f       	mov	r25, r24
    28f2:	8a a9       	ldd	r24, Y+50	; 0x32
    28f4:	89 0f       	add	r24, r25
    28f6:	8e 83       	std	Y+6, r24	; 0x06
		seting_mode_counter=0;//count 5 sec after last press
    28f8:	10 92 a7 01 	sts	0x01A7, r1
    28fc:	10 92 a6 01 	sts	0x01A6, r1

		}else
		{//NOTHING
		}
		/******on or off the system******/
		if (SW3_u8Read()== 0)
    2900:	0e 94 c2 11 	call	0x2384	; 0x2384 <SW3_u8Read>
    2904:	88 23       	and	r24, r24
    2906:	f1 f4       	brne	.+60     	; 0x2944 <main+0x350>
		{on_off_count++;
    2908:	80 91 b0 01 	lds	r24, 0x01B0
    290c:	8f 5f       	subi	r24, 0xFF	; 255
    290e:	80 93 b0 01 	sts	0x01B0, r24
		if (on_off_count == 2)//system off
    2912:	80 91 b0 01 	lds	r24, 0x01B0
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	19 f4       	brne	.+6      	; 0x2920 <main+0x32c>
		{	on_off_count=0;	}
    291a:	10 92 b0 01 	sts	0x01B0, r1
    291e:	0e c0       	rjmp	.+28     	; 0x293c <main+0x348>

		else if (on_off_count == 1)//system oN
    2920:	80 91 b0 01 	lds	r24, 0x01B0
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	51 f4       	brne	.+20     	; 0x293c <main+0x348>
		{
			TIMER_vid_Reset();
    2928:	0e 94 46 12 	call	0x248c	; 0x248c <TIMER_vid_Reset>
			TIMER_vid_Start();
    292c:	0e 94 34 12 	call	0x2468	; 0x2468 <TIMER_vid_Start>
			seting_mode=0;
    2930:	10 92 af 01 	sts	0x01AF, r1
			seting_mode_counter=0;
    2934:	10 92 a7 01 	sts	0x01A7, r1
    2938:	10 92 a6 01 	sts	0x01A6, r1
		}
		while(SW3_u8Read() == 0);
    293c:	0e 94 c2 11 	call	0x2384	; 0x2384 <SW3_u8Read>
    2940:	88 23       	and	r24, r24
    2942:	e1 f3       	breq	.-8      	; 0x293c <main+0x348>
		}



		// reading the temp sensor and the timer of the system 100ms
		if (temp_timer==25)
    2944:	80 91 a4 01 	lds	r24, 0x01A4
    2948:	89 31       	cpi	r24, 0x19	; 25
    294a:	09 f0       	breq	.+2      	; 0x294e <main+0x35a>
    294c:	88 c0       	rjmp	.+272    	; 0x2a5e <main+0x46a>
		{	water_temp_arr[temp_counter]=(float32)((float32)((float32)EXT_ADC_u16ReadDigitalVal(CHANNEL0)*2.5)/10);
    294e:	80 91 a5 01 	lds	r24, 0x01A5
    2952:	08 2f       	mov	r16, r24
    2954:	10 e0       	ldi	r17, 0x00	; 0
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <EXT_ADC_u16ReadDigitalVal>
    295c:	cc 01       	movw	r24, r24
    295e:	a0 e0       	ldi	r26, 0x00	; 0
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	50 e4       	ldi	r21, 0x40	; 64
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    299e:	ab 01       	movw	r20, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	98 01       	movw	r18, r16
    29a4:	22 0f       	add	r18, r18
    29a6:	33 1f       	adc	r19, r19
    29a8:	22 0f       	add	r18, r18
    29aa:	33 1f       	adc	r19, r19
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	82 0f       	add	r24, r18
    29b2:	93 1f       	adc	r25, r19
    29b4:	fc 01       	movw	r30, r24
    29b6:	39 96       	adiw	r30, 0x09	; 9
    29b8:	40 83       	st	Z, r20
    29ba:	51 83       	std	Z+1, r21	; 0x01
    29bc:	62 83       	std	Z+2, r22	; 0x02
    29be:	73 83       	std	Z+3, r23	; 0x03
		temp_counter++;
    29c0:	80 91 a5 01 	lds	r24, 0x01A5
    29c4:	8f 5f       	subi	r24, 0xFF	; 255
    29c6:	80 93 a5 01 	sts	0x01A5, r24
		if (temp_counter==10)
    29ca:	80 91 a5 01 	lds	r24, 0x01A5
    29ce:	8a 30       	cpi	r24, 0x0A	; 10
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <main+0x3e0>
    29d2:	43 c0       	rjmp	.+134    	; 0x2a5a <main+0x466>
		{water_temp=water_temp_arr[0];
    29d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d8:	ac 85       	ldd	r26, Y+12	; 0x0c
    29da:	bd 85       	ldd	r27, Y+13	; 0x0d
    29dc:	8a 83       	std	Y+2, r24	; 0x02
    29de:	9b 83       	std	Y+3, r25	; 0x03
    29e0:	ac 83       	std	Y+4, r26	; 0x04
    29e2:	bd 83       	std	Y+5, r27	; 0x05
		for (uint8 i=1;i<10;i++)
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	21 c0       	rjmp	.+66     	; 0x2a2c <main+0x438>
		{water_temp+=water_temp_arr[i];
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	9c 01       	movw	r18, r24
    29f2:	22 0f       	add	r18, r18
    29f4:	33 1f       	adc	r19, r19
    29f6:	22 0f       	add	r18, r18
    29f8:	33 1f       	adc	r19, r19
    29fa:	ce 01       	movw	r24, r28
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	82 0f       	add	r24, r18
    2a00:	93 1f       	adc	r25, r19
    2a02:	fc 01       	movw	r30, r24
    2a04:	39 96       	adiw	r30, 0x09	; 9
    2a06:	20 81       	ld	r18, Z
    2a08:	31 81       	ldd	r19, Z+1	; 0x01
    2a0a:	42 81       	ldd	r20, Z+2	; 0x02
    2a0c:	53 81       	ldd	r21, Z+3	; 0x03
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	9b 81       	ldd	r25, Y+3	; 0x03
    2a12:	ac 81       	ldd	r26, Y+4	; 0x04
    2a14:	bd 81       	ldd	r27, Y+5	; 0x05
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	a4 1f       	adc	r26, r20
    2a1c:	b5 1f       	adc	r27, r21
    2a1e:	8a 83       	std	Y+2, r24	; 0x02
    2a20:	9b 83       	std	Y+3, r25	; 0x03
    2a22:	ac 83       	std	Y+4, r26	; 0x04
    2a24:	bd 83       	std	Y+5, r27	; 0x05
		if (temp_timer==25)
		{	water_temp_arr[temp_counter]=(float32)((float32)((float32)EXT_ADC_u16ReadDigitalVal(CHANNEL0)*2.5)/10);
		temp_counter++;
		if (temp_counter==10)
		{water_temp=water_temp_arr[0];
		for (uint8 i=1;i<10;i++)
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	8f 5f       	subi	r24, 0xFF	; 255
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	8a 30       	cpi	r24, 0x0A	; 10
    2a30:	e0 f2       	brcs	.-72     	; 0x29ea <main+0x3f6>
		{water_temp+=water_temp_arr[i];
		}
		water_temp/=10;
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	9b 81       	ldd	r25, Y+3	; 0x03
    2a36:	ac 81       	ldd	r26, Y+4	; 0x04
    2a38:	bd 81       	ldd	r27, Y+5	; 0x05
    2a3a:	2a e0       	ldi	r18, 0x0A	; 10
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__divmodsi4>
    2a4a:	da 01       	movw	r26, r20
    2a4c:	c9 01       	movw	r24, r18
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
    2a50:	9b 83       	std	Y+3, r25	; 0x03
    2a52:	ac 83       	std	Y+4, r26	; 0x04
    2a54:	bd 83       	std	Y+5, r27	; 0x05
		temp_counter=0;
    2a56:	10 92 a5 01 	sts	0x01A5, r1
		}
		temp_timer=0;
    2a5a:	10 92 a4 01 	sts	0x01A4, r1
		}

		//setting mode waiting 5 sec
		if (seting_mode_counter == 1250)
    2a5e:	80 91 a6 01 	lds	r24, 0x01A6
    2a62:	90 91 a7 01 	lds	r25, 0x01A7
    2a66:	24 e0       	ldi	r18, 0x04	; 4
    2a68:	82 3e       	cpi	r24, 0xE2	; 226
    2a6a:	92 07       	cpc	r25, r18
    2a6c:	69 f4       	brne	.+26     	; 0x2a88 <main+0x494>
		{ seting_mode =0;
    2a6e:	10 92 af 01 	sts	0x01AF, r1
		on_off_count = 1;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 b0 01 	sts	0x01B0, r24
		seting_mode_counter=0;
    2a78:	10 92 a7 01 	sts	0x01A7, r1
    2a7c:	10 92 a6 01 	sts	0x01A6, r1
		TIMER_vid_Reset();
    2a80:	0e 94 46 12 	call	0x248c	; 0x248c <TIMER_vid_Reset>
		TIMER_vid_Start();
    2a84:	0e 94 34 12 	call	0x2468	; 0x2468 <TIMER_vid_Start>
		}

		//blinking seven segment or heading led 1sec
		if (blink_counter==125)
    2a88:	80 91 a8 01 	lds	r24, 0x01A8
    2a8c:	8d 37       	cpi	r24, 0x7D	; 125
    2a8e:	91 f5       	brne	.+100    	; 0x2af4 <main+0x500>
		{	 if (seting_mode ==1)//seven segment
    2a90:	80 91 af 01 	lds	r24, 0x01AF
    2a94:	81 30       	cpi	r24, 0x01	; 1
    2a96:	09 f5       	brne	.+66     	; 0x2ada <main+0x4e6>
		{ if (blink_toggle == 0)
    2a98:	80 91 a9 01 	lds	r24, 0x01A9
    2a9c:	88 23       	and	r24, r24
    2a9e:	71 f4       	brne	.+28     	; 0x2abc <main+0x4c8>
		{	SE7_seg_vid_write(Tens_count,1);
    2aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
		SE7_seg_vid_write(ones_count,2);
    2aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aaa:	62 e0       	ldi	r22, 0x02	; 2
    2aac:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
		blink_toggle++;
    2ab0:	80 91 a9 01 	lds	r24, 0x01A9
    2ab4:	8f 5f       	subi	r24, 0xFF	; 255
    2ab6:	80 93 a9 01 	sts	0x01A9, r24
    2aba:	1a c0       	rjmp	.+52     	; 0x2af0 <main+0x4fc>
		}else if(blink_toggle == 1)
    2abc:	80 91 a9 01 	lds	r24, 0x01A9
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	b1 f4       	brne	.+44     	; 0x2af0 <main+0x4fc>
		{
			SE7_seg_vid_write(10,1);
    2ac4:	8a e0       	ldi	r24, 0x0A	; 10
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
			SE7_seg_vid_write(10,2);
    2acc:	8a e0       	ldi	r24, 0x0A	; 10
    2ace:	62 e0       	ldi	r22, 0x02	; 2
    2ad0:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
			blink_toggle=0;
    2ad4:	10 92 a9 01 	sts	0x01A9, r1
    2ad8:	0b c0       	rjmp	.+22     	; 0x2af0 <main+0x4fc>
		}
		}
		else//heading led
		{
			if (heating_indicator==1 && on_off_count ==1)
    2ada:	80 91 ab 01 	lds	r24, 0x01AB
    2ade:	81 30       	cpi	r24, 0x01	; 1
    2ae0:	39 f4       	brne	.+14     	; 0x2af0 <main+0x4fc>
    2ae2:	80 91 b0 01 	lds	r24, 0x01B0
    2ae6:	81 30       	cpi	r24, 0x01	; 1
    2ae8:	19 f4       	brne	.+6      	; 0x2af0 <main+0x4fc>
			{LED1_vidSet(LED_TOGGLE);
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LED1_vidSet>
			}else
			{// nothing
			}
		}
		blink_counter=0;
    2af0:	10 92 a8 01 	sts	0x01A8, r1
		}
		if ( colling_indicator==1 && on_off_count ==1)
    2af4:	80 91 aa 01 	lds	r24, 0x01AA
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	39 f4       	brne	.+14     	; 0x2b0a <main+0x516>
    2afc:	80 91 b0 01 	lds	r24, 0x01B0
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	19 f4       	brne	.+6      	; 0x2b0a <main+0x516>
		{
			LED1_vidSet(LED_HIGH);
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LED1_vidSet>
		}

		// save the power if you forgot the electric water heater
		if (Req_Temp_achieved_counter == 60000)
    2b0a:	80 91 ad 01 	lds	r24, 0x01AD
    2b0e:	90 91 ae 01 	lds	r25, 0x01AE
    2b12:	2a ee       	ldi	r18, 0xEA	; 234
    2b14:	80 36       	cpi	r24, 0x60	; 96
    2b16:	92 07       	cpc	r25, r18
    2b18:	31 f4       	brne	.+12     	; 0x2b26 <main+0x532>
		{on_off_count=0;
    2b1a:	10 92 b0 01 	sts	0x01B0, r1
		Req_Temp_achieved_counter=0;
    2b1e:	10 92 ae 01 	sts	0x01AE, r1
    2b22:	10 92 ad 01 	sts	0x01AD, r1
		}


		/*****heater and cooler*****/
		//system off doings
		if (on_off_count==0 && seting_mode==0)
    2b26:	80 91 b0 01 	lds	r24, 0x01B0
    2b2a:	88 23       	and	r24, r24
    2b2c:	e9 f4       	brne	.+58     	; 0x2b68 <main+0x574>
    2b2e:	80 91 af 01 	lds	r24, 0x01AF
    2b32:	88 23       	and	r24, r24
    2b34:	c9 f4       	brne	.+50     	; 0x2b68 <main+0x574>
		{	Tens_count=temp/10;
    2b36:	8a a9       	ldd	r24, Y+50	; 0x32
    2b38:	9a e0       	ldi	r25, 0x0A	; 10
    2b3a:	69 2f       	mov	r22, r25
    2b3c:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    2b40:	8f 83       	std	Y+7, r24	; 0x07
		ones_count=temp%10;
    2b42:	8a a9       	ldd	r24, Y+50	; 0x32
    2b44:	9a e0       	ldi	r25, 0x0A	; 10
    2b46:	69 2f       	mov	r22, r25
    2b48:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__udivmodqi4>
    2b4c:	89 2f       	mov	r24, r25
    2b4e:	8e 83       	std	Y+6, r24	; 0x06
		SE7_seg_vid_write(Tens_count,1);
    2b50:	8f 81       	ldd	r24, Y+7	; 0x07
    2b52:	61 e0       	ldi	r22, 0x01	; 1
    2b54:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
		SE7_seg_vid_write(ones_count,2);
    2b58:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5a:	62 e0       	ldi	r22, 0x02	; 2
    2b5c:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
		TIMER_vid_Reset();
    2b60:	0e 94 46 12 	call	0x248c	; 0x248c <TIMER_vid_Reset>
		TIMER_vid_Stop();
    2b64:	0e 94 3d 12 	call	0x247a	; 0x247a <TIMER_vid_Stop>
		{
			//nothing
		}

		//the Heating and cooling Element control
		if (on_off_count==1)
    2b68:	80 91 b0 01 	lds	r24, 0x01B0
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <main+0x57e>
    2b70:	87 cd       	rjmp	.-1266   	; 0x2680 <main+0x8c>
		{	LED4_vidSet(LED_HIGH);
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	0e 94 1d 12 	call	0x243a	; 0x243a <LED4_vidSet>
		Tens_count=water_temp/10;
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	ac 81       	ldd	r26, Y+4	; 0x04
    2b7e:	bd 81       	ldd	r27, Y+5	; 0x05
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__divmodsi4>
    2b90:	da 01       	movw	r26, r20
    2b92:	c9 01       	movw	r24, r18
    2b94:	8f 83       	std	Y+7, r24	; 0x07
		ones_count=water_temp%10;
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	ac 81       	ldd	r26, Y+4	; 0x04
    2b9c:	bd 81       	ldd	r27, Y+5	; 0x05
    2b9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__divmodsi4>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8e 83       	std	Y+6, r24	; 0x06
		if (water_temp > 99)
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	ac 81       	ldd	r26, Y+4	; 0x04
    2bba:	bd 81       	ldd	r27, Y+5	; 0x05
    2bbc:	84 36       	cpi	r24, 0x64	; 100
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	a1 05       	cpc	r26, r1
    2bc2:	b1 05       	cpc	r27, r1
    2bc4:	24 f0       	brlt	.+8      	; 0x2bce <main+0x5da>
		{
			Tens_count=9;
    2bc6:	89 e0       	ldi	r24, 0x09	; 9
    2bc8:	8f 83       	std	Y+7, r24	; 0x07
			ones_count=9;
    2bca:	89 e0       	ldi	r24, 0x09	; 9
    2bcc:	8e 83       	std	Y+6, r24	; 0x06
		}

		SE7_seg_vid_write(Tens_count,1);
    2bce:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd0:	61 e0       	ldi	r22, 0x01	; 1
    2bd2:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
		SE7_seg_vid_write(ones_count,2);
    2bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd8:	62 e0       	ldi	r22, 0x02	; 2
    2bda:	0e 94 3e 11 	call	0x227c	; 0x227c <SE7_seg_vid_write>
		//the first water temp is near to required temp already
		if ((water_temp < (temp+5) ) && ( water_temp > (temp-5)) && (colling_indicator==0 && heating_indicator==0)&& Req_Temp_achieved_indicator==0)
    2bde:	8a a9       	ldd	r24, Y+50	; 0x32
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	05 96       	adiw	r24, 0x05	; 5
    2be6:	9c 01       	movw	r18, r24
    2be8:	44 27       	eor	r20, r20
    2bea:	37 fd       	sbrc	r19, 7
    2bec:	40 95       	com	r20
    2bee:	54 2f       	mov	r21, r20
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	ac 81       	ldd	r26, Y+4	; 0x04
    2bf6:	bd 81       	ldd	r27, Y+5	; 0x05
    2bf8:	82 17       	cp	r24, r18
    2bfa:	93 07       	cpc	r25, r19
    2bfc:	a4 07       	cpc	r26, r20
    2bfe:	b5 07       	cpc	r27, r21
    2c00:	34 f5       	brge	.+76     	; 0x2c4e <main+0x65a>
    2c02:	8a a9       	ldd	r24, Y+50	; 0x32
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	05 97       	sbiw	r24, 0x05	; 5
    2c0a:	9c 01       	movw	r18, r24
    2c0c:	44 27       	eor	r20, r20
    2c0e:	37 fd       	sbrc	r19, 7
    2c10:	40 95       	com	r20
    2c12:	54 2f       	mov	r21, r20
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	ac 81       	ldd	r26, Y+4	; 0x04
    2c1a:	bd 81       	ldd	r27, Y+5	; 0x05
    2c1c:	28 17       	cp	r18, r24
    2c1e:	39 07       	cpc	r19, r25
    2c20:	4a 07       	cpc	r20, r26
    2c22:	5b 07       	cpc	r21, r27
    2c24:	a4 f4       	brge	.+40     	; 0x2c4e <main+0x65a>
    2c26:	80 91 aa 01 	lds	r24, 0x01AA
    2c2a:	88 23       	and	r24, r24
    2c2c:	81 f4       	brne	.+32     	; 0x2c4e <main+0x65a>
    2c2e:	80 91 ab 01 	lds	r24, 0x01AB
    2c32:	88 23       	and	r24, r24
    2c34:	61 f4       	brne	.+24     	; 0x2c4e <main+0x65a>
    2c36:	80 91 ac 01 	lds	r24, 0x01AC
    2c3a:	88 23       	and	r24, r24
    2c3c:	41 f4       	brne	.+16     	; 0x2c4e <main+0x65a>
		{	Req_Temp_achieved_indicator=1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	80 93 ac 01 	sts	0x01AC, r24
		Req_Temp_achieved_counter=0;
    2c44:	10 92 ae 01 	sts	0x01AE, r1
    2c48:	10 92 ad 01 	sts	0x01AD, r1
    2c4c:	19 cd       	rjmp	.-1486   	; 0x2680 <main+0x8c>
		}
		else if ((water_temp == (temp+5) && heating_indicator==1) || (colling_indicator==1 && water_temp == (temp-5))) //achieve the required temp
    2c4e:	8a a9       	ldd	r24, Y+50	; 0x32
    2c50:	88 2f       	mov	r24, r24
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	05 96       	adiw	r24, 0x05	; 5
    2c56:	9c 01       	movw	r18, r24
    2c58:	44 27       	eor	r20, r20
    2c5a:	37 fd       	sbrc	r19, 7
    2c5c:	40 95       	com	r20
    2c5e:	54 2f       	mov	r21, r20
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	ac 81       	ldd	r26, Y+4	; 0x04
    2c66:	bd 81       	ldd	r27, Y+5	; 0x05
    2c68:	28 17       	cp	r18, r24
    2c6a:	39 07       	cpc	r19, r25
    2c6c:	4a 07       	cpc	r20, r26
    2c6e:	5b 07       	cpc	r21, r27
    2c70:	21 f4       	brne	.+8      	; 0x2c7a <main+0x686>
    2c72:	80 91 ab 01 	lds	r24, 0x01AB
    2c76:	81 30       	cpi	r24, 0x01	; 1
    2c78:	b1 f0       	breq	.+44     	; 0x2ca6 <main+0x6b2>
    2c7a:	80 91 aa 01 	lds	r24, 0x01AA
    2c7e:	81 30       	cpi	r24, 0x01	; 1
    2c80:	39 f5       	brne	.+78     	; 0x2cd0 <main+0x6dc>
    2c82:	8a a9       	ldd	r24, Y+50	; 0x32
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	05 97       	sbiw	r24, 0x05	; 5
    2c8a:	9c 01       	movw	r18, r24
    2c8c:	44 27       	eor	r20, r20
    2c8e:	37 fd       	sbrc	r19, 7
    2c90:	40 95       	com	r20
    2c92:	54 2f       	mov	r21, r20
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	ac 81       	ldd	r26, Y+4	; 0x04
    2c9a:	bd 81       	ldd	r27, Y+5	; 0x05
    2c9c:	28 17       	cp	r18, r24
    2c9e:	39 07       	cpc	r19, r25
    2ca0:	4a 07       	cpc	r20, r26
    2ca2:	5b 07       	cpc	r21, r27
    2ca4:	a9 f4       	brne	.+42     	; 0x2cd0 <main+0x6dc>
		{LED1_vidSet(LED_LOW);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LED1_vidSet>
		LED2_vidSet(LED_LOW);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	0e 94 01 12 	call	0x2402	; 0x2402 <LED2_vidSet>
		LED3_vidSet(LED_LOW);
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	0e 94 0f 12 	call	0x241e	; 0x241e <LED3_vidSet>
		heating_indicator=0;
    2cb8:	10 92 ab 01 	sts	0x01AB, r1
		colling_indicator=0;
    2cbc:	10 92 aa 01 	sts	0x01AA, r1
		Req_Temp_achieved_indicator=1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	80 93 ac 01 	sts	0x01AC, r24
		Req_Temp_achieved_counter=0;
    2cc6:	10 92 ae 01 	sts	0x01AE, r1
    2cca:	10 92 ad 01 	sts	0x01AD, r1
    2cce:	d8 cc       	rjmp	.-1616   	; 0x2680 <main+0x8c>
		}
		else if (water_temp < (temp-5))//cooling Element on
    2cd0:	8a a9       	ldd	r24, Y+50	; 0x32
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	05 97       	sbiw	r24, 0x05	; 5
    2cd8:	9c 01       	movw	r18, r24
    2cda:	44 27       	eor	r20, r20
    2cdc:	37 fd       	sbrc	r19, 7
    2cde:	40 95       	com	r20
    2ce0:	54 2f       	mov	r21, r20
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce6:	ac 81       	ldd	r26, Y+4	; 0x04
    2ce8:	bd 81       	ldd	r27, Y+5	; 0x05
    2cea:	82 17       	cp	r24, r18
    2cec:	93 07       	cpc	r25, r19
    2cee:	a4 07       	cpc	r26, r20
    2cf0:	b5 07       	cpc	r27, r21
    2cf2:	84 f4       	brge	.+32     	; 0x2d14 <main+0x720>
		{	LED2_vidSet(LED_LOW);
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	0e 94 01 12 	call	0x2402	; 0x2402 <LED2_vidSet>
		LED3_vidSet(LED_HIGH);
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	0e 94 0f 12 	call	0x241e	; 0x241e <LED3_vidSet>
		heating_indicator=1;colling_indicator=0;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	80 93 ab 01 	sts	0x01AB, r24
    2d06:	10 92 aa 01 	sts	0x01AA, r1
		Req_Temp_achieved_counter=0;
    2d0a:	10 92 ae 01 	sts	0x01AE, r1
    2d0e:	10 92 ad 01 	sts	0x01AD, r1
    2d12:	b6 cc       	rjmp	.-1684   	; 0x2680 <main+0x8c>
		}
		else if (water_temp > (temp+5))//heating Element on
    2d14:	8a a9       	ldd	r24, Y+50	; 0x32
    2d16:	88 2f       	mov	r24, r24
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	05 96       	adiw	r24, 0x05	; 5
    2d1c:	9c 01       	movw	r18, r24
    2d1e:	44 27       	eor	r20, r20
    2d20:	37 fd       	sbrc	r19, 7
    2d22:	40 95       	com	r20
    2d24:	54 2f       	mov	r21, r20
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	ac 81       	ldd	r26, Y+4	; 0x04
    2d2c:	bd 81       	ldd	r27, Y+5	; 0x05
    2d2e:	28 17       	cp	r18, r24
    2d30:	39 07       	cpc	r19, r25
    2d32:	4a 07       	cpc	r20, r26
    2d34:	5b 07       	cpc	r21, r27
    2d36:	0c f0       	brlt	.+2      	; 0x2d3a <main+0x746>
    2d38:	a3 cc       	rjmp	.-1722   	; 0x2680 <main+0x8c>
		{	LED2_vidSet(LED_HIGH);
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	0e 94 01 12 	call	0x2402	; 0x2402 <LED2_vidSet>
		LED3_vidSet(LED_LOW);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	0e 94 0f 12 	call	0x241e	; 0x241e <LED3_vidSet>
		colling_indicator=1;heating_indicator=0;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	80 93 aa 01 	sts	0x01AA, r24
    2d4c:	10 92 ab 01 	sts	0x01AB, r1
		Req_Temp_achieved_counter=0;
    2d50:	10 92 ae 01 	sts	0x01AE, r1
    2d54:	10 92 ad 01 	sts	0x01AD, r1
    2d58:	93 cc       	rjmp	.-1754   	; 0x2680 <main+0x8c>

00002d5a <timer_isr>:
	}
}

//function of the timer
void timer_isr (void)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
	temp_timer++;
    2d62:	80 91 a4 01 	lds	r24, 0x01A4
    2d66:	8f 5f       	subi	r24, 0xFF	; 255
    2d68:	80 93 a4 01 	sts	0x01A4, r24
	if (seting_mode == 1)
    2d6c:	80 91 af 01 	lds	r24, 0x01AF
    2d70:	81 30       	cpi	r24, 0x01	; 1
    2d72:	79 f4       	brne	.+30     	; 0x2d92 <timer_isr+0x38>
	{
		seting_mode_counter++;
    2d74:	80 91 a6 01 	lds	r24, 0x01A6
    2d78:	90 91 a7 01 	lds	r25, 0x01A7
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	90 93 a7 01 	sts	0x01A7, r25
    2d82:	80 93 a6 01 	sts	0x01A6, r24
		blink_counter++;
    2d86:	80 91 a8 01 	lds	r24, 0x01A8
    2d8a:	8f 5f       	subi	r24, 0xFF	; 255
    2d8c:	80 93 a8 01 	sts	0x01A8, r24
    2d90:	1b c0       	rjmp	.+54     	; 0x2dc8 <timer_isr+0x6e>
	}else if (on_off_count == 1 )
    2d92:	80 91 b0 01 	lds	r24, 0x01B0
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	b9 f4       	brne	.+46     	; 0x2dc8 <timer_isr+0x6e>
	{if (heating_indicator == 1)
    2d9a:	80 91 ab 01 	lds	r24, 0x01AB
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	31 f4       	brne	.+12     	; 0x2dae <timer_isr+0x54>
	{blink_counter++;
    2da2:	80 91 a8 01 	lds	r24, 0x01A8
    2da6:	8f 5f       	subi	r24, 0xFF	; 255
    2da8:	80 93 a8 01 	sts	0x01A8, r24
    2dac:	0d c0       	rjmp	.+26     	; 0x2dc8 <timer_isr+0x6e>
	}else if (Req_Temp_achieved_indicator==1)
    2dae:	80 91 ac 01 	lds	r24, 0x01AC
    2db2:	81 30       	cpi	r24, 0x01	; 1
    2db4:	49 f4       	brne	.+18     	; 0x2dc8 <timer_isr+0x6e>
	{Req_Temp_achieved_counter++;
    2db6:	80 91 ad 01 	lds	r24, 0x01AD
    2dba:	90 91 ae 01 	lds	r25, 0x01AE
    2dbe:	01 96       	adiw	r24, 0x01	; 1
    2dc0:	90 93 ae 01 	sts	0x01AE, r25
    2dc4:	80 93 ad 01 	sts	0x01AD, r24
	}
	}

}
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <__udivmodqi4>:
    2dce:	99 1b       	sub	r25, r25
    2dd0:	79 e0       	ldi	r23, 0x09	; 9
    2dd2:	04 c0       	rjmp	.+8      	; 0x2ddc <__udivmodqi4_ep>

00002dd4 <__udivmodqi4_loop>:
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	96 17       	cp	r25, r22
    2dd8:	08 f0       	brcs	.+2      	; 0x2ddc <__udivmodqi4_ep>
    2dda:	96 1b       	sub	r25, r22

00002ddc <__udivmodqi4_ep>:
    2ddc:	88 1f       	adc	r24, r24
    2dde:	7a 95       	dec	r23
    2de0:	c9 f7       	brne	.-14     	; 0x2dd4 <__udivmodqi4_loop>
    2de2:	80 95       	com	r24
    2de4:	08 95       	ret

00002de6 <__divmodsi4>:
    2de6:	97 fb       	bst	r25, 7
    2de8:	09 2e       	mov	r0, r25
    2dea:	05 26       	eor	r0, r21
    2dec:	0e d0       	rcall	.+28     	; 0x2e0a <__divmodsi4_neg1>
    2dee:	57 fd       	sbrc	r21, 7
    2df0:	04 d0       	rcall	.+8      	; 0x2dfa <__divmodsi4_neg2>
    2df2:	14 d0       	rcall	.+40     	; 0x2e1c <__udivmodsi4>
    2df4:	0a d0       	rcall	.+20     	; 0x2e0a <__divmodsi4_neg1>
    2df6:	00 1c       	adc	r0, r0
    2df8:	38 f4       	brcc	.+14     	; 0x2e08 <__divmodsi4_exit>

00002dfa <__divmodsi4_neg2>:
    2dfa:	50 95       	com	r21
    2dfc:	40 95       	com	r20
    2dfe:	30 95       	com	r19
    2e00:	21 95       	neg	r18
    2e02:	3f 4f       	sbci	r19, 0xFF	; 255
    2e04:	4f 4f       	sbci	r20, 0xFF	; 255
    2e06:	5f 4f       	sbci	r21, 0xFF	; 255

00002e08 <__divmodsi4_exit>:
    2e08:	08 95       	ret

00002e0a <__divmodsi4_neg1>:
    2e0a:	f6 f7       	brtc	.-4      	; 0x2e08 <__divmodsi4_exit>
    2e0c:	90 95       	com	r25
    2e0e:	80 95       	com	r24
    2e10:	70 95       	com	r23
    2e12:	61 95       	neg	r22
    2e14:	7f 4f       	sbci	r23, 0xFF	; 255
    2e16:	8f 4f       	sbci	r24, 0xFF	; 255
    2e18:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1a:	08 95       	ret

00002e1c <__udivmodsi4>:
    2e1c:	a1 e2       	ldi	r26, 0x21	; 33
    2e1e:	1a 2e       	mov	r1, r26
    2e20:	aa 1b       	sub	r26, r26
    2e22:	bb 1b       	sub	r27, r27
    2e24:	fd 01       	movw	r30, r26
    2e26:	0d c0       	rjmp	.+26     	; 0x2e42 <__udivmodsi4_ep>

00002e28 <__udivmodsi4_loop>:
    2e28:	aa 1f       	adc	r26, r26
    2e2a:	bb 1f       	adc	r27, r27
    2e2c:	ee 1f       	adc	r30, r30
    2e2e:	ff 1f       	adc	r31, r31
    2e30:	a2 17       	cp	r26, r18
    2e32:	b3 07       	cpc	r27, r19
    2e34:	e4 07       	cpc	r30, r20
    2e36:	f5 07       	cpc	r31, r21
    2e38:	20 f0       	brcs	.+8      	; 0x2e42 <__udivmodsi4_ep>
    2e3a:	a2 1b       	sub	r26, r18
    2e3c:	b3 0b       	sbc	r27, r19
    2e3e:	e4 0b       	sbc	r30, r20
    2e40:	f5 0b       	sbc	r31, r21

00002e42 <__udivmodsi4_ep>:
    2e42:	66 1f       	adc	r22, r22
    2e44:	77 1f       	adc	r23, r23
    2e46:	88 1f       	adc	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	1a 94       	dec	r1
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <__udivmodsi4_loop>
    2e4e:	60 95       	com	r22
    2e50:	70 95       	com	r23
    2e52:	80 95       	com	r24
    2e54:	90 95       	com	r25
    2e56:	9b 01       	movw	r18, r22
    2e58:	ac 01       	movw	r20, r24
    2e5a:	bd 01       	movw	r22, r26
    2e5c:	cf 01       	movw	r24, r30
    2e5e:	08 95       	ret

00002e60 <__prologue_saves__>:
    2e60:	2f 92       	push	r2
    2e62:	3f 92       	push	r3
    2e64:	4f 92       	push	r4
    2e66:	5f 92       	push	r5
    2e68:	6f 92       	push	r6
    2e6a:	7f 92       	push	r7
    2e6c:	8f 92       	push	r8
    2e6e:	9f 92       	push	r9
    2e70:	af 92       	push	r10
    2e72:	bf 92       	push	r11
    2e74:	cf 92       	push	r12
    2e76:	df 92       	push	r13
    2e78:	ef 92       	push	r14
    2e7a:	ff 92       	push	r15
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	ca 1b       	sub	r28, r26
    2e8a:	db 0b       	sbc	r29, r27
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	09 94       	ijmp

00002e98 <__epilogue_restores__>:
    2e98:	2a 88       	ldd	r2, Y+18	; 0x12
    2e9a:	39 88       	ldd	r3, Y+17	; 0x11
    2e9c:	48 88       	ldd	r4, Y+16	; 0x10
    2e9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ea0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eaa:	b9 84       	ldd	r11, Y+9	; 0x09
    2eac:	c8 84       	ldd	r12, Y+8	; 0x08
    2eae:	df 80       	ldd	r13, Y+7	; 0x07
    2eb0:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb2:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb4:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb6:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb8:	aa 81       	ldd	r26, Y+2	; 0x02
    2eba:	b9 81       	ldd	r27, Y+1	; 0x01
    2ebc:	ce 0f       	add	r28, r30
    2ebe:	d1 1d       	adc	r29, r1
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	ed 01       	movw	r28, r26
    2ecc:	08 95       	ret

00002ece <_exit>:
    2ece:	f8 94       	cli

00002ed0 <__stop_program>:
    2ed0:	ff cf       	rjmp	.-2      	; 0x2ed0 <__stop_program>
